From 4740f58fb36257e4a9c8ae18a3d050b4462e360c Mon Sep 17 00:00:00 2001
From: jykanase <v-jykanase@microsoft.com>
Date: Thu, 10 Jul 2025 13:18:01 +0000
Subject: [PATCH] CVE-2025-53547

Upstream patch reference: https://github.com/helm/helm/commit/4b8e61093d8f579f1165cdc6bd4b43fa5455f571 
---
 pkg/downloader/manager.go      | 14 +++++
 pkg/downloader/manager_test.go | 94 ++++++++++++++++++++++++++++++++++
 2 files changed, 108 insertions(+)

diff --git a/pkg/downloader/manager.go b/pkg/downloader/manager.go
index 68c9c6e..4f24609 100644
--- a/pkg/downloader/manager.go
+++ b/pkg/downloader/manager.go
@@ -852,6 +852,20 @@ func writeLock(chartpath string, lock *chart.Lock, legacyLockfile bool) error {
 		lockfileName = "requirements.lock"
 	}
 	dest := filepath.Join(chartpath, lockfileName)
+
+	info, err := os.Lstat(dest)
+	if err != nil && !os.IsNotExist(err) {
+		return fmt.Errorf("error getting info for %q: %w", dest, err)
+	} else if err == nil {
+		if info.Mode()&os.ModeSymlink != 0 {
+			link, err := os.Readlink(dest)
+			if err != nil {
+				return fmt.Errorf("error reading symlink for %q: %w", dest, err)
+			}
+			return fmt.Errorf("the %s file is a symlink to %q", lockfileName, link)
+		}
+	}
+
 	return os.WriteFile(dest, data, 0644)
 }
 
diff --git a/pkg/downloader/manager_test.go b/pkg/downloader/manager_test.go
index db2487d..77c3ee9 100644
--- a/pkg/downloader/manager_test.go
+++ b/pkg/downloader/manager_test.go
@@ -21,6 +21,9 @@ import (
 	"path/filepath"
 	"reflect"
 	"testing"
+        "time"
+        
+	"sigs.k8s.io/yaml"
 
 	"helm.sh/helm/v3/pkg/chart"
 	"helm.sh/helm/v3/pkg/chart/loader"
@@ -598,3 +601,94 @@ func TestKey(t *testing.T) {
 		}
 	}
 }
+
+func TestWriteLock(t *testing.T) {
+	fixedTime, err := time.Parse(time.RFC3339, "2025-07-04T00:00:00Z")
+	assert.NoError(t, err)
+	lock := &chart.Lock{
+		Generated: fixedTime,
+		Digest:    "sha256:12345",
+		Dependencies: []*chart.Dependency{
+			{
+				Name:       "fantastic-chart",
+				Version:    "1.2.3",
+				Repository: "https://example.com/charts",
+			},
+		},
+	}
+	expectedContent, err := yaml.Marshal(lock)
+	assert.NoError(t, err)
+
+	t.Run("v2 lock file", func(t *testing.T) {
+		dir := t.TempDir()
+		err := writeLock(dir, lock, false)
+		assert.NoError(t, err)
+
+		lockfilePath := filepath.Join(dir, "Chart.lock")
+		_, err = os.Stat(lockfilePath)
+		assert.NoError(t, err, "Chart.lock should exist")
+
+		content, err := os.ReadFile(lockfilePath)
+		assert.NoError(t, err)
+		assert.Equal(t, expectedContent, content)
+
+		// Check that requirements.lock does not exist
+		_, err = os.Stat(filepath.Join(dir, "requirements.lock"))
+		assert.Error(t, err)
+		assert.True(t, os.IsNotExist(err))
+	})
+
+	t.Run("v1 lock file", func(t *testing.T) {
+		dir := t.TempDir()
+		err := writeLock(dir, lock, true)
+		assert.NoError(t, err)
+
+		lockfilePath := filepath.Join(dir, "requirements.lock")
+		_, err = os.Stat(lockfilePath)
+		assert.NoError(t, err, "requirements.lock should exist")
+
+		content, err := os.ReadFile(lockfilePath)
+		assert.NoError(t, err)
+		assert.Equal(t, expectedContent, content)
+
+		// Check that Chart.lock does not exist
+		_, err = os.Stat(filepath.Join(dir, "Chart.lock"))
+		assert.Error(t, err)
+		assert.True(t, os.IsNotExist(err))
+	})
+
+	t.Run("overwrite existing lock file", func(t *testing.T) {
+		dir := t.TempDir()
+		lockfilePath := filepath.Join(dir, "Chart.lock")
+		assert.NoError(t, os.WriteFile(lockfilePath, []byte("old content"), 0644))
+
+		err = writeLock(dir, lock, false)
+		assert.NoError(t, err)
+
+		content, err := os.ReadFile(lockfilePath)
+		assert.NoError(t, err)
+		assert.Equal(t, expectedContent, content)
+	})
+
+	t.Run("lock file is a symlink", func(t *testing.T) {
+		dir := t.TempDir()
+		dummyFile := filepath.Join(dir, "dummy.txt")
+		assert.NoError(t, os.WriteFile(dummyFile, []byte("dummy"), 0644))
+
+		lockfilePath := filepath.Join(dir, "Chart.lock")
+		assert.NoError(t, os.Symlink(dummyFile, lockfilePath))
+
+		err = writeLock(dir, lock, false)
+		assert.Error(t, err)
+		assert.Contains(t, err.Error(), "the Chart.lock file is a symlink to")
+	})
+
+	t.Run("chart path is not a directory", func(t *testing.T) {
+		dir := t.TempDir()
+		filePath := filepath.Join(dir, "not-a-dir")
+		assert.NoError(t, os.WriteFile(filePath, []byte("file"), 0644))
+
+		err = writeLock(filePath, lock, false)
+		assert.Error(t, err)
+	})
+}
-- 
2.45.2

