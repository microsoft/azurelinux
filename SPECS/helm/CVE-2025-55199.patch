From c0ac4ee0f24e1cef198dd8a899fdc02075bd9778 Mon Sep 17 00:00:00 2001
From: AllSpark <allspark@microsoft.com>
Date: Thu, 18 Sep 2025 13:58:44 +0000
Subject: [PATCH] json schema fix

Signed-off-by: Azure Linux Security Servicing Account <azurelinux-security@microsoft.com>
Upstream-reference: AI Backport of https://github.com/helm/helm/commit/ec5f59e2db56533d042a124f5bae54dd87b558e6.patch
---
 .../testdata/output/schema-negative-cli.txt   |  4 +-
 cmd/helm/testdata/output/schema-negative.txt  |  6 ++-
 .../output/subchart-schema-cli-negative.txt   |  4 +-
 .../output/subchart-schema-negative.txt       |  6 ++-
 go.mod                                        |  4 +-
 pkg/chartutil/jsonschema.go                   | 48 ++++++++++++-------
 pkg/chartutil/jsonschema_test.go              | 16 +++++--
 pkg/lint/rules/values_test.go                 |  8 +++-
 8 files changed, 64 insertions(+), 32 deletions(-)

diff --git a/cmd/helm/testdata/output/schema-negative-cli.txt b/cmd/helm/testdata/output/schema-negative-cli.txt
index c4a5cc5..abe4766 100644
--- a/cmd/helm/testdata/output/schema-negative-cli.txt
+++ b/cmd/helm/testdata/output/schema-negative-cli.txt
@@ -1,4 +1,6 @@
+
 Error: INSTALLATION FAILED: values don't meet the specifications of the schema(s) in the following chart(s):
 empty:
-- age: Must be greater than or equal to 0
+- at '/age': minimum: got -5, want 0
+
 
diff --git a/cmd/helm/testdata/output/schema-negative.txt b/cmd/helm/testdata/output/schema-negative.txt
index 929af55..8e8bd0b 100644
--- a/cmd/helm/testdata/output/schema-negative.txt
+++ b/cmd/helm/testdata/output/schema-negative.txt
@@ -1,5 +1,7 @@
+
 Error: INSTALLATION FAILED: values don't meet the specifications of the schema(s) in the following chart(s):
 empty:
-- (root): employmentInfo is required
-- age: Must be greater than or equal to 0
+- at '': missing property 'employmentInfo'
+- at '/age': minimum: got -5, want 0
+
 
diff --git a/cmd/helm/testdata/output/subchart-schema-cli-negative.txt b/cmd/helm/testdata/output/subchart-schema-cli-negative.txt
index 7396b4b..14427c6 100644
--- a/cmd/helm/testdata/output/subchart-schema-cli-negative.txt
+++ b/cmd/helm/testdata/output/subchart-schema-cli-negative.txt
@@ -1,4 +1,6 @@
+
 Error: INSTALLATION FAILED: values don't meet the specifications of the schema(s) in the following chart(s):
 subchart-with-schema:
-- age: Must be greater than or equal to 0
+- at '/age': minimum: got -25, want 0
+
 
diff --git a/cmd/helm/testdata/output/subchart-schema-negative.txt b/cmd/helm/testdata/output/subchart-schema-negative.txt
index 7b1f654..7d667ef 100644
--- a/cmd/helm/testdata/output/subchart-schema-negative.txt
+++ b/cmd/helm/testdata/output/subchart-schema-negative.txt
@@ -1,6 +1,8 @@
+
 Error: INSTALLATION FAILED: values don't meet the specifications of the schema(s) in the following chart(s):
 chart-without-schema:
-- (root): lastname is required
+- at '': missing property 'lastname'
 subchart-with-schema:
-- (root): age is required
+- at '': missing property 'age'
+
 
diff --git a/go.mod b/go.mod
index efbf3d3..38ae503 100644
--- a/go.mod
+++ b/go.mod
@@ -1,3 +1,4 @@
+
 module helm.sh/helm/v3
 
 go 1.21
@@ -32,7 +33,7 @@ require (
 	github.com/spf13/cobra v1.8.0
 	github.com/spf13/pflag v1.0.5
 	github.com/stretchr/testify v1.8.4
-	github.com/xeipuuv/gojsonschema v1.2.0
+	github.com/santhosh-tekuri/jsonschema/v6 v6.0.2
 	golang.org/x/crypto v0.17.0
 	golang.org/x/term v0.15.0
 	golang.org/x/text v0.14.0
@@ -167,3 +168,4 @@ require (
 	sigs.k8s.io/kustomize/kyaml v0.14.3-0.20230601165947-6ce0bf390ce3 // indirect
 	sigs.k8s.io/structured-merge-diff/v4 v4.4.1 // indirect
 )
+
diff --git a/pkg/chartutil/jsonschema.go b/pkg/chartutil/jsonschema.go
index 7b9768f..645620c 100644
--- a/pkg/chartutil/jsonschema.go
+++ b/pkg/chartutil/jsonschema.go
@@ -1,3 +1,6 @@
+
+
+
 /*
 Copyright The Helm Authors.
 
@@ -18,12 +21,11 @@ package chartutil
 
 import (
 	"bytes"
+	"errors"
 	"fmt"
 	"strings"
 
-	"github.com/pkg/errors"
-	"github.com/xeipuuv/gojsonschema"
-	"sigs.k8s.io/yaml"
+	"github.com/santhosh-tekuri/jsonschema/v6"
 
 	"helm.sh/helm/v3/pkg/chart"
 )
@@ -39,7 +41,6 @@ func ValidateAgainstSchema(chrt *chart.Chart, values map[string]interface{}) err
 		}
 	}
 
-	// For each dependency, recursively call this function with the coalesced values
 	for _, subchart := range chrt.Dependencies() {
 		subchartValues := values[subchart.Name()].(map[string]interface{})
 		if err := ValidateAgainstSchema(subchart, subchartValues); err != nil {
@@ -62,32 +63,43 @@ func ValidateAgainstSingleSchema(values Values, schemaJSON []byte) (reterr error
 		}
 	}()
 
-	valuesData, err := yaml.Marshal(values)
+	// This unmarshal function leverages UseNumber() for number precision. The parser
+	// used for values does this as well.
+	schema, err := jsonschema.UnmarshalJSON(bytes.NewReader(schemaJSON))
 	if err != nil {
 		return err
 	}
-	valuesJSON, err := yaml.YAMLToJSON(valuesData)
+
+	compiler := jsonschema.NewCompiler()
+	err = compiler.AddResource("file:///values.schema.json", schema)
 	if err != nil {
 		return err
 	}
-	if bytes.Equal(valuesJSON, []byte("null")) {
-		valuesJSON = []byte("{}")
-	}
-	schemaLoader := gojsonschema.NewBytesLoader(schemaJSON)
-	valuesLoader := gojsonschema.NewBytesLoader(valuesJSON)
 
-	result, err := gojsonschema.Validate(schemaLoader, valuesLoader)
+	validator, err := compiler.Compile("file:///values.schema.json")
 	if err != nil {
 		return err
 	}
 
-	if !result.Valid() {
-		var sb strings.Builder
-		for _, desc := range result.Errors() {
-			sb.WriteString(fmt.Sprintf("- %s\n", desc))
-		}
-		return errors.New(sb.String())
+	err = validator.Validate(values.AsMap())
+	if err != nil {
+		return JSONSchemaValidationError{err}
 	}
 
 	return nil
 }
+
+ type JSONSchemaValidationError struct {
+ 	embeddedErr error
+ }
+ 
+ func (e JSONSchemaValidationError) Error() string {
+ 	errStr := e.embeddedErr.Error()
+ 
+ 	errStr = strings.TrimPrefix(errStr, "jsonschema validation failed with 'file:///values.schema.json#'\n")
+ 
+ 	return errStr + "\n"
+ }
+
+
+
diff --git a/pkg/chartutil/jsonschema_test.go b/pkg/chartutil/jsonschema_test.go
index 7610db3..ca16c98 100644
--- a/pkg/chartutil/jsonschema_test.go
+++ b/pkg/chartutil/jsonschema_test.go
@@ -1,3 +1,6 @@
+
+
+
 /*
 Copyright The Helm Authors.
 
@@ -55,8 +58,8 @@ func TestValidateAgainstInvalidSingleSchema(t *testing.T) {
 		errString = err.Error()
 	}
 
-	expectedErrString := "unable to validate schema: runtime error: invalid " +
-		"memory address or nil pointer dereference"
+	expectedErrString := `"file:///values.schema.json#" is not valid against metaschema: jsonschema validation failed with 'https://json-schema.org/draft/2020-12/schema#'
+- at '': got number, want boolean or object`
 	if errString != expectedErrString {
 		t.Errorf("Error string :\n`%s`\ndoes not match expected\n`%s`", errString, expectedErrString)
 	}
@@ -79,8 +82,8 @@ func TestValidateAgainstSingleSchemaNegative(t *testing.T) {
 		errString = err.Error()
 	}
 
-	expectedErrString := `- (root): employmentInfo is required
-- age: Must be greater than or equal to 0
+	expectedErrString := `- at '': missing property 'employmentInfo'
+- at '/age': minimum: got -5, want 0
 `
 	if errString != expectedErrString {
 		t.Errorf("Error string :\n`%s`\ndoes not match expected\n`%s`", errString, expectedErrString)
@@ -159,9 +162,12 @@ func TestValidateAgainstSchemaNegative(t *testing.T) {
 	}
 
 	expectedErrString := `subchart:
-- (root): age is required
+- at '': missing property 'age'
 `
 	if errString != expectedErrString {
 		t.Errorf("Error string :\n`%s`\ndoes not match expected\n`%s`", errString, expectedErrString)
 	}
 }
+
+
+
diff --git a/pkg/lint/rules/values_test.go b/pkg/lint/rules/values_test.go
index faa29d4..7ff04aa 100644
--- a/pkg/lint/rules/values_test.go
+++ b/pkg/lint/rules/values_test.go
@@ -1,3 +1,5 @@
+
+
 /*
 Copyright The Helm Authors.
 
@@ -96,7 +98,7 @@ func TestValidateValuesFileSchemaFailure(t *testing.T) {
 		t.Fatal("expected values file to fail parsing")
 	}
 
-	assert.Contains(t, err.Error(), "Expected: string, given: integer", "integer should be caught by schema")
+	assert.Contains(t, err.Error(), "- at '/username': got number, want string")
 }
 
 func TestValidateValuesFileSchemaOverrides(t *testing.T) {
@@ -129,7 +131,7 @@ func TestValidateValuesFile(t *testing.T) {
 			name:         "value not overridden",
 			yaml:         "username: admin\npassword:",
 			overrides:    map[string]interface{}{"username": "anotherUser"},
-			errorMessage: "Expected: string, given: null",
+			errorMessage: "- at '/password': got null, want string",
 		},
 		{
 			name:      "value overridden",
@@ -167,3 +169,5 @@ func createTestingSchema(t *testing.T, dir string) string {
 	}
 	return schemafile
 }
+
+
-- 
2.45.4

