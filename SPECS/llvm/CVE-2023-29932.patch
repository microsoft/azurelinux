From dae67f9e84e0dd02ee20b018b1b10f067aea15b7 Mon Sep 17 00:00:00 2001
From: Kevin Lockwood <v-klockwood@microsoft.com>
Date: Tue, 4 Mar 2025 10:55:12 -0800
Subject: [PATCH] Patch llvm for CVE-2023-29932

Link: https://github.com/llvm/llvm-project/commit/d35fcf0e.patch
---
 include/llvm/IR/IntrinsicsWebAssembly.td | 130 ++++++++++++-----------
 1 file changed, 66 insertions(+), 64 deletions(-)

diff --git a/include/llvm/IR/IntrinsicsWebAssembly.td b/include/llvm/IR/IntrinsicsWebAssembly.td
index d306d0cc..e890d7fc 100644
--- a/include/llvm/IR/IntrinsicsWebAssembly.td
+++ b/include/llvm/IR/IntrinsicsWebAssembly.td
@@ -16,10 +16,10 @@ let TargetPrefix = "wasm" in {  // All intrinsics start with "llvm.wasm.".
 // Query the current memory size, and increase the current memory size.
 // Note that memory.size is not IntrNoMem because it must be sequenced with
 // respect to memory.grow calls.
-def int_wasm_memory_size : Intrinsic<[llvm_anyint_ty],
+def int_wasm_memory_size : DefaultAttrsIntrinsic<[llvm_anyint_ty],
                                      [llvm_i32_ty],
                                      [IntrReadMem]>;
-def int_wasm_memory_grow : Intrinsic<[llvm_anyint_ty],
+def int_wasm_memory_grow : DefaultAttrsIntrinsic<[llvm_anyint_ty],
                                      [llvm_i32_ty, LLVMMatchType<0>],
                                      []>;
 
@@ -27,6 +27,7 @@ def int_wasm_memory_grow : Intrinsic<[llvm_anyint_ty],
 // Trapping float-to-int conversions
 //===----------------------------------------------------------------------===//
 
+// These don't use default attributes, because they are not willreturn.
 def int_wasm_trunc_signed : Intrinsic<[llvm_anyint_ty],
                                       [llvm_anyfloat_ty],
                                       [IntrNoMem]>;
@@ -38,10 +39,10 @@ def int_wasm_trunc_unsigned : Intrinsic<[llvm_anyint_ty],
 // Saturating float-to-int conversions
 //===----------------------------------------------------------------------===//
 
-def int_wasm_trunc_saturate_signed : Intrinsic<[llvm_anyint_ty],
+def int_wasm_trunc_saturate_signed : DefaultAttrsIntrinsic<[llvm_anyint_ty],
                                                [llvm_anyfloat_ty],
                                                [IntrNoMem, IntrSpeculatable]>;
-def int_wasm_trunc_saturate_unsigned : Intrinsic<[llvm_anyint_ty],
+def int_wasm_trunc_saturate_unsigned : DefaultAttrsIntrinsic<[llvm_anyint_ty],
                                                  [llvm_anyfloat_ty],
                                                  [IntrNoMem, IntrSpeculatable]>;
 
@@ -57,31 +58,32 @@ def int_wasm_rethrow : Intrinsic<[], [], [Throws, IntrNoReturn]>;
 
 // Since wasm does not use landingpad instructions, these instructions return
 // exception pointer and selector values until we lower them in WasmEHPrepare.
-def int_wasm_get_exception : Intrinsic<[llvm_ptr_ty], [llvm_token_ty],
+def int_wasm_get_exception : DefaultAttrsIntrinsic<[llvm_ptr_ty], [llvm_token_ty],
                                        [IntrHasSideEffects]>;
-def int_wasm_get_ehselector : Intrinsic<[llvm_i32_ty], [llvm_token_ty],
+def int_wasm_get_ehselector : DefaultAttrsIntrinsic<[llvm_i32_ty], [llvm_token_ty],
                                         [IntrHasSideEffects]>;
 
 // wasm.catch returns the pointer to the exception object caught by wasm 'catch'
 // instruction. This returns a single pointer, which is sufficient for C++
 // support. The immediate argument is an index to for a tag, which is 0 for C++.
-def int_wasm_catch : Intrinsic<[llvm_ptr_ty], [llvm_i32_ty],
+def int_wasm_catch : DefaultAttrsIntrinsic<[llvm_ptr_ty], [llvm_i32_ty],
                                [IntrHasSideEffects, ImmArg<ArgIndex<0>>]>;
 
 // WebAssembly EH must maintain the landingpads in the order assigned to them
 // by WasmEHPrepare pass to generate landingpad table in EHStreamer. This is
 // used in order to give them the indices in WasmEHPrepare.
-def int_wasm_landingpad_index: Intrinsic<[], [llvm_token_ty, llvm_i32_ty],
+def int_wasm_landingpad_index: DefaultAttrsIntrinsic<[], [llvm_token_ty, llvm_i32_ty],
                                          [IntrNoMem, ImmArg<ArgIndex<1>>]>;
 
 // Returns LSDA address of the current function.
-def int_wasm_lsda : Intrinsic<[llvm_ptr_ty], [], [IntrNoMem]>;
+def int_wasm_lsda : DefaultAttrsIntrinsic<[llvm_ptr_ty], [], [IntrNoMem]>;
 
 //===----------------------------------------------------------------------===//
 // Atomic intrinsics
 //===----------------------------------------------------------------------===//
 
 // wait / notify
+// These don't use default attributes, because they are not nosync.
 def int_wasm_memory_atomic_wait32 :
   Intrinsic<[llvm_i32_ty],
             [LLVMPointerType<llvm_i32_ty>, llvm_i32_ty, llvm_i64_ty],
@@ -105,89 +107,89 @@ def int_wasm_memory_atomic_notify:
 //===----------------------------------------------------------------------===//
 
 def int_wasm_swizzle :
-  Intrinsic<[llvm_v16i8_ty],
+  DefaultAttrsIntrinsic<[llvm_v16i8_ty],
             [llvm_v16i8_ty, llvm_v16i8_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_shuffle :
-  Intrinsic<[llvm_v16i8_ty],
+  DefaultAttrsIntrinsic<[llvm_v16i8_ty],
             [llvm_v16i8_ty, llvm_v16i8_ty, llvm_i32_ty, llvm_i32_ty,
              llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty,
              llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty,
              llvm_i32_ty, llvm_i32_ty, llvm_i32_ty, llvm_i32_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_sub_saturate_signed :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_sub_saturate_unsigned :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_avgr_unsigned :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_bitselect :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_anytrue :
-  Intrinsic<[llvm_i32_ty],
+  DefaultAttrsIntrinsic<[llvm_i32_ty],
             [llvm_anyvector_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_alltrue :
-  Intrinsic<[llvm_i32_ty],
+  DefaultAttrsIntrinsic<[llvm_i32_ty],
             [llvm_anyvector_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_bitmask :
-  Intrinsic<[llvm_i32_ty],
+  DefaultAttrsIntrinsic<[llvm_i32_ty],
             [llvm_anyvector_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_qfma :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_qfms :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_dot :
-  Intrinsic<[llvm_v4i32_ty],
+  DefaultAttrsIntrinsic<[llvm_v4i32_ty],
             [llvm_v8i16_ty, llvm_v8i16_ty],
             [IntrNoMem, IntrSpeculatable]>;
 
 def int_wasm_narrow_signed :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [llvm_anyvector_ty, LLVMMatchType<1>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_narrow_unsigned :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [llvm_anyvector_ty, LLVMMatchType<1>],
             [IntrNoMem, IntrSpeculatable]>;
 
 // TODO: Replace these intrinsics with normal ISel patterns once i32x4 to i64x2
 // widening is merged to the proposal.
 def int_wasm_widen_low_signed :
-  Intrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
+  DefaultAttrsIntrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_widen_high_signed :
-  Intrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
+  DefaultAttrsIntrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_widen_low_unsigned :
-  Intrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
+  DefaultAttrsIntrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_widen_high_unsigned :
-  Intrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
+  DefaultAttrsIntrinsic<[llvm_v2i64_ty], [llvm_v4i32_ty], [IntrNoMem, IntrSpeculatable]>;
 
 def int_wasm_q15mulr_saturate_signed :
-  Intrinsic<[llvm_v8i16_ty],
+  DefaultAttrsIntrinsic<[llvm_v8i16_ty],
             [llvm_v8i16_ty, llvm_v8i16_ty],
             [IntrNoMem, IntrSpeculatable]>;
 
 // TODO: Replace these intrinsics with normal ISel patterns
 def int_wasm_pmin :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_pmax :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 
@@ -195,32 +197,32 @@ def int_wasm_pmax :
 // rounding instructions are merged to the proposal
 // (https://github.com/WebAssembly/simd/pull/232).
 def int_wasm_ceil :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_floor :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_trunc :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_nearest :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 
 // TODO: Replace these intrinsic with normal ISel patterns once the
 // load_zero instructions are merged to the proposal.
 def int_wasm_load32_zero :
-  Intrinsic<[llvm_v4i32_ty],
+  DefaultAttrsIntrinsic<[llvm_v4i32_ty],
             [LLVMPointerType<llvm_i32_ty>],
             [IntrReadMem, IntrArgMemOnly],
              "", [SDNPMemOperand]>;
 
 def int_wasm_load64_zero :
-  Intrinsic<[llvm_v2i64_ty],
+  DefaultAttrsIntrinsic<[llvm_v2i64_ty],
             [LLVMPointerType<llvm_i64_ty>],
             [IntrReadMem, IntrArgMemOnly],
              "", [SDNPMemOperand]>;
@@ -231,42 +233,42 @@ def int_wasm_load64_zero :
 // tablegen patterns. TODO: Replace these intrinsic with normal ISel patterns
 // once the load_lane instructions are merged to the proposal.
 def int_wasm_load8_lane :
-  Intrinsic<[llvm_v16i8_ty],
+  DefaultAttrsIntrinsic<[llvm_v16i8_ty],
             [LLVMPointerType<llvm_i8_ty>, llvm_v16i8_ty, llvm_i32_ty],
             [IntrReadMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
 def int_wasm_load16_lane :
-  Intrinsic<[llvm_v8i16_ty],
+  DefaultAttrsIntrinsic<[llvm_v8i16_ty],
             [LLVMPointerType<llvm_i16_ty>, llvm_v8i16_ty, llvm_i32_ty],
             [IntrReadMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
 def int_wasm_load32_lane :
-  Intrinsic<[llvm_v4i32_ty],
+  DefaultAttrsIntrinsic<[llvm_v4i32_ty],
             [LLVMPointerType<llvm_i32_ty>, llvm_v4i32_ty, llvm_i32_ty],
             [IntrReadMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
 def int_wasm_load64_lane :
-  Intrinsic<[llvm_v2i64_ty],
+  DefaultAttrsIntrinsic<[llvm_v2i64_ty],
             [LLVMPointerType<llvm_i64_ty>, llvm_v2i64_ty, llvm_i32_ty],
             [IntrReadMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
 def int_wasm_store8_lane :
-  Intrinsic<[],
+  DefaultAttrsIntrinsic<[],
             [LLVMPointerType<llvm_i8_ty>, llvm_v16i8_ty, llvm_i32_ty],
             [IntrWriteMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
 def int_wasm_store16_lane :
-  Intrinsic<[],
+  DefaultAttrsIntrinsic<[],
             [LLVMPointerType<llvm_i16_ty>, llvm_v8i16_ty, llvm_i32_ty],
             [IntrWriteMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
 def int_wasm_store32_lane :
-  Intrinsic<[],
+  DefaultAttrsIntrinsic<[],
             [LLVMPointerType<llvm_i32_ty>, llvm_v4i32_ty, llvm_i32_ty],
             [IntrWriteMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
 def int_wasm_store64_lane :
-  Intrinsic<[],
+  DefaultAttrsIntrinsic<[],
             [LLVMPointerType<llvm_i64_ty>, llvm_v2i64_ty, llvm_i32_ty],
             [IntrWriteMem, IntrArgMemOnly],
             "", [SDNPMemOperand]>;
@@ -274,78 +276,78 @@ def int_wasm_store64_lane :
 // TODO: Replace this intrinsic with normal ISel patterns once popcnt is merged
 // to the proposal.
 def int_wasm_popcnt :
-  Intrinsic<[llvm_v16i8_ty], [llvm_v16i8_ty], [IntrNoMem, IntrSpeculatable]>;
+  DefaultAttrsIntrinsic<[llvm_v16i8_ty], [llvm_v16i8_ty], [IntrNoMem, IntrSpeculatable]>;
 
 def int_wasm_extmul_low_signed :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMSubdivide2VectorType<0>, LLVMSubdivide2VectorType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_extmul_high_signed :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMSubdivide2VectorType<0>, LLVMSubdivide2VectorType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_extmul_low_unsigned :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMSubdivide2VectorType<0>, LLVMSubdivide2VectorType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_extmul_high_unsigned :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMSubdivide2VectorType<0>, LLVMSubdivide2VectorType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 
 def int_wasm_extadd_pairwise_signed :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMSubdivide2VectorType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_extadd_pairwise_unsigned :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMSubdivide2VectorType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 
 def int_wasm_signselect :
-  Intrinsic<[llvm_anyvector_ty],
+  DefaultAttrsIntrinsic<[llvm_anyvector_ty],
             [LLVMMatchType<0>, LLVMMatchType<0>, LLVMMatchType<0>],
             [IntrNoMem, IntrSpeculatable]>;
 
 // TODO: Remove this intrinsic and the associated builtin if i64x2.eq gets
 // merged to the proposal.
 def int_wasm_eq :
-  Intrinsic<[llvm_v2i64_ty],
+  DefaultAttrsIntrinsic<[llvm_v2i64_ty],
             [llvm_v2i64_ty, llvm_v2i64_ty],
             [IntrNoMem, IntrSpeculatable]>;
 
 // TODO: Remove this after experiments have been run. Use the target-agnostic
 // int_prefetch if this becomes specified at some point.
 def int_wasm_prefetch_t :
-  Intrinsic<[], [llvm_ptr_ty],
+  DefaultAttrsIntrinsic<[], [llvm_ptr_ty],
             [IntrInaccessibleMemOrArgMemOnly, IntrWillReturn,
              ReadOnly<ArgIndex<0>>, NoCapture<ArgIndex<0>>],
             "", [SDNPMemOperand]>;
 
 def int_wasm_prefetch_nt :
-  Intrinsic<[], [llvm_ptr_ty],
+  DefaultAttrsIntrinsic<[], [llvm_ptr_ty],
             [IntrInaccessibleMemOrArgMemOnly, IntrWillReturn,
              ReadOnly<ArgIndex<0>>, NoCapture<ArgIndex<0>>],
             "", [SDNPMemOperand]>;
 
 // TODO: Remove these if possible if they are merged to the spec.
 def int_wasm_convert_low_signed :
-  Intrinsic<[llvm_v2f64_ty], [llvm_v4i32_ty],
+  DefaultAttrsIntrinsic<[llvm_v2f64_ty], [llvm_v4i32_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_convert_low_unsigned :
-  Intrinsic<[llvm_v2f64_ty], [llvm_v4i32_ty],
+  DefaultAttrsIntrinsic<[llvm_v2f64_ty], [llvm_v4i32_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_trunc_saturate_zero_signed :
-  Intrinsic<[llvm_v4i32_ty], [llvm_v2f64_ty],
+  DefaultAttrsIntrinsic<[llvm_v4i32_ty], [llvm_v2f64_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_trunc_saturate_zero_unsigned :
-  Intrinsic<[llvm_v4i32_ty], [llvm_v2f64_ty],
+  DefaultAttrsIntrinsic<[llvm_v4i32_ty], [llvm_v2f64_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_demote_zero :
-  Intrinsic<[llvm_v4f32_ty], [llvm_v2f64_ty],
+  DefaultAttrsIntrinsic<[llvm_v4f32_ty], [llvm_v2f64_ty],
             [IntrNoMem, IntrSpeculatable]>;
 def int_wasm_promote_low :
-  Intrinsic<[llvm_v2f64_ty], [llvm_v4f32_ty],
+  DefaultAttrsIntrinsic<[llvm_v2f64_ty], [llvm_v4f32_ty],
             [IntrNoMem, IntrSpeculatable]>;
 
 //===----------------------------------------------------------------------===//
@@ -353,17 +355,17 @@ def int_wasm_promote_low :
 //===----------------------------------------------------------------------===//
 
 def int_wasm_tls_size :
-  Intrinsic<[llvm_anyint_ty],
+  DefaultAttrsIntrinsic<[llvm_anyint_ty],
             [],
             [IntrNoMem, IntrSpeculatable]>;
 
 def int_wasm_tls_align :
-  Intrinsic<[llvm_anyint_ty],
+  DefaultAttrsIntrinsic<[llvm_anyint_ty],
             [],
             [IntrNoMem, IntrSpeculatable]>;
 
 def int_wasm_tls_base :
-  Intrinsic<[llvm_ptr_ty],
+  DefaultAttrsIntrinsic<[llvm_ptr_ty],
             [],
             [IntrReadMem]>;
 
-- 
2.34.1

