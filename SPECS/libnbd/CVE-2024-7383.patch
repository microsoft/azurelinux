From 5ff09cdbbd19226dd2d5015d76134f88dee9321e Mon Sep 17 00:00:00 2001
From: "Richard W.M. Jones" <rjones@redhat.com>
Date: Tue, 25 Jun 2024 10:55:54 +0100
Subject: [PATCH] build: Move to minimum gnutls >= 3.5.18
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This version matches current qemu.

RHEL 7 gnutls is too old (lacks gnutls_session_set_verify_cert), which
means TLS will be disabled on this platform.  RHEL 8 has gnutls 3.6.14.

I also unconditionally enabled the gnutls/socket.h header.  This
header was added in 2016 (gnutls 3.5.3), so it's not present in RHEL 7.

On RHEL 7 the configure-time test now prints:

  checking for GNUTLS... no
  configure: WARNING: gnutls not found or < 3.5.18, TLS support will be disabled.
  ...
  Optional library features:
      TLS support ............................ no

Reviewed-by: Daniel P. BerrangÃ© <berrange@redhat.com>
---
 configure.ac | 5 ++---
 lib/crypto.c | 6 ------
 2 files changed, 2 insertions(+), 9 deletions(-)

diff --git a/configure.ac b/configure.ac
index cd12254b..eba108c5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -191,13 +191,13 @@ AC_ARG_WITH([gnutls],
     [],
     [with_gnutls=check])
 AS_IF([test "$with_gnutls" != "no"],[
-    PKG_CHECK_MODULES([GNUTLS], [gnutls >= 3.3.0], [
+    PKG_CHECK_MODULES([GNUTLS], [gnutls >= 3.5.18], [
         printf "gnutls version is "; $PKG_CONFIG --modversion gnutls
         AC_SUBST([GNUTLS_CFLAGS])
         AC_SUBST([GNUTLS_LIBS])
         AC_DEFINE([HAVE_GNUTLS],[1],[gnutls found at compile time.])
     ], [
-        AC_MSG_WARN([gnutls not found or < 3.3.0, TLS support will be disabled.])
+        AC_MSG_WARN([gnutls not found or < 3.5.18, TLS support will be disabled.])
     ])
 ])
 AM_CONDITIONAL([HAVE_GNUTLS], [test "x$GNUTLS_LIBS" != "x"])
@@ -223,7 +223,6 @@ AS_IF([test "$GNUTLS_LIBS" != ""],[
     old_LIBS="$LIBS"
     LIBS="$GNUTLS_LIBS $LIBS"
     AC_CHECK_FUNCS([\
-        gnutls_session_set_verify_cert \
         gnutls_transport_is_ktls_enabled \
     ])
     LIBS="$old_LIBS"
diff --git a/lib/crypto.c b/lib/crypto.c
index 22a1cfa5..d131f1d0 100644
--- a/lib/crypto.c
+++ b/lib/crypto.c
@@ -28,10 +28,8 @@
 
 #ifdef HAVE_GNUTLS
 #include <gnutls/gnutls.h>
-#ifdef HAVE_GNUTLS_SOCKET_H
 #include <gnutls/socket.h>
 #endif
-#endif
 
 #include "internal.h"
 #include "nbdkit-string.h"
@@ -532,12 +530,8 @@ set_up_certificate_credentials (struct nbd_handle *h,
   return NULL;
 
  found_certificates:
-#ifdef HAVE_GNUTLS_SESSION_SET_VERIFY_CERT
   if (h->hostname && h->tls_verify_peer)
     gnutls_session_set_verify_cert (session, h->hostname, 0);
-#else
-  debug (h, "ignoring nbd_set_tls_verify_peer, this requires GnuTLS >= 3.4.6");
-#endif
 
   err = gnutls_credentials_set (session, GNUTLS_CRD_CERTIFICATE, ret);
   if (err < 0) {
-- 
GitLab
From 87ef41b69929d5d293390ec36b1c10aba2c9a57a Mon Sep 17 00:00:00 2001
From: "Richard W.M. Jones" <rjones@redhat.com>
Date: Mon, 24 Jun 2024 10:48:12 +0100
Subject: [PATCH] lib/crypto.c: Check server certificate even when using system
 CA
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The previous code checked the server certificate only when a custom
certificate directory was set (ie.  nbd_set_tls_certificates /
?tls-certificates=DIR).  In the fallback case where we use the system
CA, we never called gnutls_session_set_verify_cert and so the server
certificate was never checked.

Move the call to gnutls_session_set_verify_cert later so it is called
on both paths.

If the server certificate does not match the hostname you will see:

nbdinfo: nbd_connect_uri: gnutls_handshake: Error in the certificate verification. (15/1)

Reported-by: Jon Szymaniak <jon.szymaniak@gmail.com>
Reviewed-by: Daniel P. BerrangÃ© <berrange@redhat.com>
---
 lib/crypto.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/lib/crypto.c b/lib/crypto.c
index d131f1d0..c542ce6b 100644
--- a/lib/crypto.c
+++ b/lib/crypto.c
@@ -530,9 +530,6 @@ set_up_certificate_credentials (struct nbd_handle *h,
   return NULL;
 
  found_certificates:
-  if (h->hostname && h->tls_verify_peer)
-    gnutls_session_set_verify_cert (session, h->hostname, 0);
-
   err = gnutls_credentials_set (session, GNUTLS_CRD_CERTIFICATE, ret);
   if (err < 0) {
     set_error (0, "gnutls_credentials_set: %s", gnutls_strerror (err));
@@ -647,6 +644,9 @@ nbd_internal_crypto_create_session (struct nbd_handle *h,
       gnutls_deinit (session);
       return NULL;
     }
+
+    if (h->hostname && h->tls_verify_peer)
+      gnutls_session_set_verify_cert (session, h->hostname, 0);
   }
 
   /* Wrap the underlying socket with GnuTLS. */
-- 
GitLab
From 6ed47a27d14f6f11946bb096d94e5bf21d97083d Mon Sep 17 00:00:00 2001
From: "Richard W.M. Jones" <rjones@redhat.com>
Date: Mon, 24 Jun 2024 10:31:10 +0100
Subject: [PATCH] lib/crypto.c: Allow CA verification even if h->hostname is
 not set
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Calling gnutls_session_set_verify_cert with the hostname parameter set
to NULL is permitted:
https://www.gnutls.org/manual/html_node/Core-TLS-API.html#gnutls_005fsession_005fset_005fverify_005fcert

It means that the server's hostname in the certificate will not be
verified but we can at least check that the certificate was signed by
the CA.  This allows the CA to be checked even for connections over
Unix domain sockets.

Example:

  $ rm -f /tmp/sock
  $ nbdkit -U /tmp/sock -f --tls=require --tls-certificates=$HOME/d/nbdkit/tests/pki memory 1G &

Before this change:

  $ nbdinfo 'nbds+unix://?socket=/tmp/sock'
  protocol: newstyle-fixed with TLS, using structured packets
  export="":
	export-size: 1073741824 (1G)
	content: data
	uri: nbds+unix:///?socket=/tmp/sock
  [etc]

(works because it never called gnutls_session_set_verify_cert).

After this change:

  $ nbdinfo 'nbds+unix://?socket=/tmp/sock'
  nbdinfo: nbd_connect_uri: gnutls_handshake: Error in the certificate verification. (15/1)

(fails because system CA does not know about nbdkit's certificate
which is signed by the CA from the nbdkit/tests/pki directory)

  $ nbdinfo 'nbds+unix://?socket=/tmp/sock&tls-certificates=/home/rjones/d/nbdkit/tests/pki'
  protocol: newstyle-fixed with TLS, using structured packets
  export="":
	export-size: 1073741824 (1G)
	content: data
	uri: nbds+unix:///?socket=/tmp/sock&tls-certificates=/home/rjones/d/nbdkit/tests/pki
  [etc]

(works because we supplied the correct CA)

Reviewed-by: Daniel P. BerrangÃ© <berrange@redhat.com>
---
 lib/crypto.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/crypto.c b/lib/crypto.c
index c542ce6b..437e24ec 100644
--- a/lib/crypto.c
+++ b/lib/crypto.c
@@ -645,7 +645,7 @@ nbd_internal_crypto_create_session (struct nbd_handle *h,
       return NULL;
     }
 
-    if (h->hostname && h->tls_verify_peer)
+    if (h->tls_verify_peer)
       gnutls_session_set_verify_cert (session, h->hostname, 0);
   }
 
-- 
GitLab
