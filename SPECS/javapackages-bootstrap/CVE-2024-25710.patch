From 9ba26258615490114ba1b8c510d32d462aed5cee Mon Sep 17 00:00:00 2001
From: archana25-ms <v-shettigara@microsoft.com>
Date: Wed, 9 Jul 2025 16:12:01 +0000
Subject: [PATCH] Address CVE-2024-25710
Upstream Patch Reference: https://github.com/apache/commons-compress/commit/8a9a5847c04ae39a1d45b365f8bb82022466067d#diff-fe1b45a8f9cafb5f9e7a2c518bbaa8a3766efe002946262fcbb09df1f87fac5d

---
 .../archivers/dump/DumpArchiveConstants.java  |  3 +-
 .../archivers/dump/DumpArchiveUtil.java       | 13 ++++---
 .../archivers/dump/TapeInputStream.java       |  3 ++
 .../dump/DumpArchiveInputStreamTest.java      | 16 ++++++++
 .../archivers/dump/DumpArchiveUtilTest.java   | 22 ++++++++++-
 .../archivers/dump/TapeInputStreamTest.java   | 38 +++++++++++++++++++
 .../compress/dump/directory_null_bytes.dump   |  0
 .../dump/invalid_compression_type.dump        |  0
 8 files changed, 87 insertions(+), 8 deletions(-)
 create mode 100644 downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/TapeInputStreamTest.java
 create mode 100644 downstream/commons-compress/src/test/resources/org/apache/commons/compress/dump/directory_null_bytes.dump
 create mode 100644 downstream/commons-compress/src/test/resources/org/apache/commons/compress/dump/invalid_compression_type.dump

diff --git a/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java b/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java
index 920a623..0e5070c 100644
--- a/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java
+++ b/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java
@@ -68,6 +68,7 @@ public static SEGMENT_TYPE find(final int code) {
      * The type of compression.
      */
     public enum COMPRESSION_TYPE {
+        UNKNOWN(-1),
         ZLIB(0),
         BZLIB(1),
         LZO(2);
@@ -85,7 +86,7 @@ public static COMPRESSION_TYPE find(final int code) {
                 }
             }
 
-            return null;
+            return UNKNOWN;
         }
     }
 }
diff --git a/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java b/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java
index 20e1eb3..b1222c5 100644
--- a/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java
+++ b/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java
@@ -41,11 +41,9 @@ private DumpArchiveUtil() {
      */
     public static int calculateChecksum(final byte[] buffer) {
         int calc = 0;
-
         for (int i = 0; i < 256; i++) {
             calc += DumpArchiveUtil.convert32(buffer, 4 * i);
         }
-
         return DumpArchiveConstants.CHECKSUM -
         (calc - DumpArchiveUtil.convert32(buffer, 28));
     }
@@ -56,16 +54,16 @@ public static int calculateChecksum(final byte[] buffer) {
      * @param buffer
      */
     public static final boolean verify(final byte[] buffer) {
+        if (buffer == null) {
+            return false;
+        }
         // verify magic. for now only accept NFS_MAGIC.
         final int magic = convert32(buffer, 24);
-
         if (magic != DumpArchiveConstants.NFS_MAGIC) {
             return false;
         }
-
         //verify checksum...
         final int checksum = convert32(buffer, 28);
-
         return checksum == calculateChecksum(buffer);
     }
 
@@ -116,6 +114,9 @@ public static final int convert16(final byte[] buffer, final int offset) {
      */
     static String decode(final ZipEncoding encoding, final byte[] b, final int offset, final int len)
         throws IOException {
-        return encoding.decode(Arrays.copyOfRange(b, offset, offset + len));
+            if (offset > offset + len) {
+                throw new IOException("Invalid offset/length combination");
+            }
+            return encoding.decode(Arrays.copyOfRange(b, offset, offset + len));
     }
 }
diff --git a/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java b/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
index 006953f..06ae23d 100644
--- a/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
+++ b/downstream/commons-compress/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
@@ -75,6 +75,9 @@ public void resetBlockSize(final int recsPerBlock, final boolean isCompressed)
                 + " records found, must be at least 1");
         }
         blockSize = RECORD_SIZE * recsPerBlock;
+        if (blockSize < 1) {
+            throw new IOException("Block size cannot be less than or equal to 0: " + blockSize);
+        }
 
         // save first block in case we need it again
         final byte[] oldBuffer = blockBuffer;
diff --git a/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java b/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java
index b31b635..7f95869 100644
--- a/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java
+++ b/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java
@@ -96,4 +96,20 @@ public void multiByteReadConsistentlyReturnsMinusOneAtEof() throws Exception {
         }
     }
 
+    @Test
+    public void testDirectoryNullBytes() throws Exception {
+        try (InputStream is = newInputStream("org/apache/commons/compress/dump/directory_null_bytes.dump");
+             DumpArchiveInputStream archive = new DumpArchiveInputStream(is)) {
+            assertThrows(InvalidFormatException.class, archive::getNextEntry);
+        }
+    }
+
+    @Test
+    public void testInvalidCompressType() throws Exception {
+        try (InputStream is = newInputStream("org/apache/commons/compress/dump/invalid_compression_type.dump")) {
+            final ArchiveException ex = assertThrows(ArchiveException.class, () -> new DumpArchiveInputStream(is).close());
+            assertInstanceOf(UnsupportedCompressionAlgorithmException.class, ex.getCause());
+        }
+    }
+
 }
diff --git a/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtilTest.java b/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtilTest.java
index 2aceca3..5dbdde7 100644
--- a/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtilTest.java
+++ b/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtilTest.java
@@ -18,7 +18,11 @@
  */
 package org.apache.commons.compress.archivers.dump;
 
+import static org.junit.Assert.assertThrows;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+
+import java.io.IOException;
 
 import org.junit.Test;
 
@@ -48,4 +52,20 @@ public void convert16() {
                              (byte) 0xCD, (byte) 0xAB
                          }, 0));
     }
-}
\ No newline at end of file
+
+    @Test
+    public void testDecodeInvalidArguments() {
+        assertThrows(IOException.class, () -> DumpArchiveUtil.decode(null, new byte[10], 10, -1));
+    }
+
+    @Test
+    public void testVerifyNullArgument() {
+        assertFalse(DumpArchiveUtil.verify(null));
+    }
+
+    @Test
+    public void testVerifyNoMagic() {
+        assertFalse(DumpArchiveUtil.verify(new byte[32]));
+    }
+
+}
diff --git a/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/TapeInputStreamTest.java b/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/TapeInputStreamTest.java
new file mode 100644
index 0000000..775bb66
--- /dev/null
+++ b/downstream/commons-compress/src/test/java/org/apache/commons/compress/archivers/dump/TapeInputStreamTest.java
@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.commons.compress.archivers.dump;
+
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+
+import org.apache.commons.compress.AbstractTest;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+public class TapeInputStreamTest extends AbstractTest {
+    @ParameterizedTest
+    @ValueSource(ints = {-1, 0, Integer.MAX_VALUE / 1000, Integer.MAX_VALUE})
+    public void testResetBlockSizeWithInvalidValues(final int recsPerBlock) throws Exception {
+        try (TapeInputStream tapeInputStream = new TapeInputStream(new ByteArrayInputStream(new byte[1]))) {
+            assertThrows(IOException.class, () -> tapeInputStream.resetBlockSize(recsPerBlock, true));
+        }
+    }
+}
diff --git a/downstream/commons-compress/src/test/resources/org/apache/commons/compress/dump/directory_null_bytes.dump b/downstream/commons-compress/src/test/resources/org/apache/commons/compress/dump/directory_null_bytes.dump
new file mode 100644
index 0000000..e69de29
diff --git a/downstream/commons-compress/src/test/resources/org/apache/commons/compress/dump/invalid_compression_type.dump b/downstream/commons-compress/src/test/resources/org/apache/commons/compress/dump/invalid_compression_type.dump
new file mode 100644
index 0000000..e69de29
-- 
2.45.3

