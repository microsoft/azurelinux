From 9094487a554b8303f5a93a67144dd1dd02715bec Mon Sep 17 00:00:00 2001
From: AllSpark <allspark@microsoft.com>
Date: Mon, 18 Aug 2025 06:27:07 +0000
Subject: [PATCH] dnfdaemon: Explicitly specify allowed config overrides; limit
 main config options overrides for dnfdaemon session only to those explicitly
 allowed.

Signed-off-by: Azure Linux Security Servicing Account <azurelinux-security@microsoft.com>
Upstream Patch Reference: AI Backport of https://github.com/rpm-software-management/dnf5/commit/07c5770482605ca78aaed41f7224d141c5980de4.patch:
---
 dnf5daemon-server/session.cpp | 38 ++++++++++++++++++++++++++++++++++-
 1 file changed, 37 insertions(+), 1 deletion(-)

diff --git a/dnf5daemon-server/session.cpp b/dnf5daemon-server/session.cpp
index b5e4b7e..07e9a09 100644
--- a/dnf5daemon-server/session.cpp
+++ b/dnf5daemon-server/session.cpp
@@ -34,6 +34,37 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <chrono>
 #include <iostream>
 #include <string>
+#include <unordered_set>
+
+
+static const std::unordered_set<std::string> ALLOWED_MAIN_CONF_OVERRIDES = {
+    "allow_downgrade",
+    "allow_vendor_change",
+    "best",
+    "clean_requirements_on_remove",
+    "disable_excludes",
+    "exclude_from_weak",
+    "exclude_from_weak_autodetect",
+    "excludepkgs",
+    "ignorearch",
+    "includepkgs",
+    "installonly_limit",
+    "installonlypkgs",
+    "install_weak_deps",
+    "keepcache",
+    "module_obsoletes",
+    "module_platform_id",
+    "module_stream_switch",
+    "multilib_policy",
+    "obsoletes",
+    "optional_metadata_types",
+    "protect_running_kernel",
+    "reposdir",
+    "skip_broken",
+    "skip_if_unavailable",
+    "skip_unavailable",
+    "strict",
+};
 
 
 Session::Session(
@@ -69,7 +100,12 @@ Session::Session(
         }
         auto bind = opt_binds.find(key);
         if (bind != opt_binds.end()) {
-            bind->second.new_string(libdnf::Option::Priority::RUNTIME, value);
+            if (ALLOWED_MAIN_CONF_OVERRIDES.find(key) != ALLOWED_MAIN_CONF_OVERRIDES.end()) {
+                bind->second.new_string(libdnf::Option::Priority::RUNTIME, value);
+            } else {
+                base->get_logger()->warning("Config option {} not allowed.", key);
+                continue;
+            }
         } else {
             base->get_logger()->warning("Unknown config option: {}", key);
         }
-- 
2.45.4

