From 4ec9e3d286b6d3e982cb0fc3564dee0bf8d87ede Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Tue, 27 Aug 2024 12:18:58 -0500
Subject: [PATCH 1/4] fuzzing: Cover soup_header_parse_param_list

---
 fuzzing/fuzz.h                   |  9 +++++++--
 fuzzing/fuzz_header_parsing.c    | 19 +++++++++++++++++++
 fuzzing/fuzz_header_parsing.dict |  8 ++++++++
 fuzzing/meson.build              |  2 ++
 4 files changed, 36 insertions(+), 2 deletions(-)
 create mode 100644 fuzzing/fuzz_header_parsing.c
 create mode 100644 fuzzing/fuzz_header_parsing.dict

diff --git a/fuzzing/fuzz.h b/fuzzing/fuzz.h
index 0d3802856..f3bd28eee 100644
--- a/fuzzing/fuzz.h
+++ b/fuzzing/fuzz.h
@@ -1,13 +1,14 @@
 #include "libsoup/soup.h"
 
 int LLVMFuzzerTestOneInput (const unsigned char *data, size_t size);
+static int set_logger = 0;
 
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
 static GLogWriterOutput
 empty_logging_func (GLogLevelFlags log_level, const GLogField *fields,
                     gsize n_fields, gpointer user_data)
 {
-  return G_LOG_WRITER_HANDLED;
+        return G_LOG_WRITER_HANDLED;
 }
 #endif
 
@@ -16,6 +17,10 @@ static void
 fuzz_set_logging_func (void)
 {
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
-  g_log_set_writer_func (empty_logging_func, NULL, NULL);
+        if (!set_logger)
+        {
+                set_logger = 1;
+                g_log_set_writer_func (empty_logging_func, NULL, NULL);
+        }
 #endif
 }
diff --git a/fuzzing/fuzz_header_parsing.c b/fuzzing/fuzz_header_parsing.c
new file mode 100644
index 000000000..a8e5c1f9f
--- /dev/null
+++ b/fuzzing/fuzz_header_parsing.c
@@ -0,0 +1,19 @@
+#include "fuzz.h"
+
+int
+LLVMFuzzerTestOneInput (const unsigned char *data, size_t size)
+{
+        GHashTable *elements;
+
+        // We only accept NUL terminated strings
+        if (!size || data[size - 1] != '\0')
+                return 0;
+
+        fuzz_set_logging_func ();
+
+        elements = soup_header_parse_param_list((char*)data);
+
+        g_hash_table_unref(elements);
+
+        return 0;
+}
\ No newline at end of file
diff --git a/fuzzing/fuzz_header_parsing.dict b/fuzzing/fuzz_header_parsing.dict
new file mode 100644
index 000000000..1562ca3a6
--- /dev/null
+++ b/fuzzing/fuzz_header_parsing.dict
@@ -0,0 +1,8 @@
+"*=UTF-8''"
+"*=iso-8859-1''"
+"'"
+"''"
+"="
+"*="
+"""
+";"
\ No newline at end of file
diff --git a/fuzzing/meson.build b/fuzzing/meson.build
index b14cbb509..5dd0f4173 100644
--- a/fuzzing/meson.build
+++ b/fuzzing/meson.build
@@ -5,6 +5,7 @@ fuzz_targets = [
   'fuzz_cookie_parse',
   'fuzz_content_sniffer',
   'fuzz_date_time',
+  'fuzz_header_parsing',
 ]
 
 fuzzing_args = '-fsanitize=fuzzer,address,undefined'
@@ -34,6 +35,7 @@ if have_fuzzing and (fuzzing_feature.enabled() or fuzzing_feature.auto())
         '-runs=200000',
         '-artifact_prefix=meson-logs/' + target + '-',
         '-print_final_stats=1',
+        '-max_len=4096',
       ] + extra_args,
       env: [
         'ASAN_OPTIONS=fast_unwind_on_malloc=0',
-- 
GitLab


From 825fda3425546847b42ad5270544e9388ff349fe Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Tue, 27 Aug 2024 13:52:08 -0500
Subject: [PATCH 2/4] tests: Add test for passing invalid UTF-8 to
 soup_header_parse_semi_param_list()

---
 tests/header-parsing-test.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c
index 715c2c6f2..5e423d2b2 100644
--- a/tests/header-parsing-test.c
+++ b/tests/header-parsing-test.c
@@ -825,6 +825,17 @@ static struct ParamListTest {
 	    { "filename", "t\xC3\xA9st.txt" },
 	  },
 	},
+
+        /* This tests invalid UTF-8 data which *should* never be passed here but it was designed to be robust against it. */
+        { TRUE,
+              "invalid*=\x69\x27\x27\x93\x93\x93\x93\xff\x61\x61\x61\x61\x61\x61\x61\x62\x63\x64\x65\x0a; filename*=iso-8859-1''\x69\x27\x27\x93\x93\x93\x93\xff\x61\x61\x61\x61\x61\x61\x61\x62\x63\x64\x65\x0a; foo",
+              {
+                    { "filename", "i''\302\223\302\223\302\223\302\223\303\277aaaaaaabcde" },
+                    { "invalid", "\302\223\302\223\302\223\302\223\303\277aaaaaaabcde" },
+                    { "foo", NULL },
+
+                },
+        }
 };
 static const int num_paramlisttests = G_N_ELEMENTS (paramlisttests);
 
-- 
GitLab


From 3c54033634ae537b52582900a7ba432c52ae8174 Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Mon, 16 Sep 2024 13:56:09 -0500
Subject: [PATCH 3/4] Define GLIB_VERSION_MAX_ALLOWED and
 GLIB_VERSION_MIN_REQUIRED

---
 meson.build          | 3 +++
 tests/hsts-db-test.c | 3 ++-
 tests/proxy-test.c   | 3 ++-
 3 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/meson.build b/meson.build
index f7c633891..08b0d764d 100644
--- a/meson.build
+++ b/meson.build
@@ -112,6 +112,9 @@ glib_deps = [glib_dep, gmodule_dep, gobject_dep, gio_dep]
 
 cdata = configuration_data()
 
+cdata.set('GLIB_VERSION_MAX_ALLOWED', 'GLIB_VERSION_2_70')
+cdata.set('GLIB_VERSION_MIN_REQUIRED', 'GLIB_VERSION_2_70')
+
 libnghttp2_dep = dependency('libnghttp2')
 if (libnghttp2_dep.version() == 'unknown' and (libnghttp2_dep.type_name() == 'internal' or cc.has_function('nghttp2_option_set_no_rfc9113_leading_and_trailing_ws_validation', prefix : '#include <nghttp2/nghttp2.h>', dependencies : libnghttp2_dep))) or libnghttp2_dep.version().version_compare('>=1.50')
     cdata.set('HAVE_NGHTTP2_OPTION_SET_NO_RFC9113_LEADING_AND_TRAILING_WS_VALIDATION', '1')
diff --git a/tests/hsts-db-test.c b/tests/hsts-db-test.c
index 1149a044f..04d7c4f12 100644
--- a/tests/hsts-db-test.c
+++ b/tests/hsts-db-test.c
@@ -1,8 +1,9 @@
+#include "test-utils.h"
+
 #include <glib.h>
 #include <glib/gstdio.h>
 
 #include <stdio.h>
-#include "test-utils.h"
 #include "soup-uri-utils-private.h"
 
 #define DB_FILE "hsts-db.sqlite"
diff --git a/tests/proxy-test.c b/tests/proxy-test.c
index ec0393671..d730c8a7b 100644
--- a/tests/proxy-test.c
+++ b/tests/proxy-test.c
@@ -1,8 +1,9 @@
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*- */
 
-#include <gio/gio.h>
 #include "test-utils.h"
 
+#include <gio/gio.h>
+
 typedef struct {
 	const char *explanation;
 	const char *url;
-- 
GitLab


From a35222dd0bfab2ac97c10e86b95f762456628283 Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Tue, 27 Aug 2024 13:53:26 -0500
Subject: [PATCH 4/4] headers: Be more robust against invalid input when
 parsing params

If you pass invalid input to a function such as soup_header_parse_param_list_strict()
it can cause an overflow if it decodes the input to UTF-8.

This should never happen with valid UTF-8 input which libsoup's client API
ensures, however it's server API does not currently.
---
 libsoup/soup-headers.c | 46 ++++++++++++++++++++++--------------------
 1 file changed, 24 insertions(+), 22 deletions(-)

diff --git a/libsoup/soup-headers.c b/libsoup/soup-headers.c
index f30ee467a..613e1905e 100644
--- a/libsoup/soup-headers.c
+++ b/libsoup/soup-headers.c
@@ -646,8 +646,9 @@ soup_header_contains (const char *header, const char *token)
 }
 
 static void
-decode_quoted_string (char *quoted_string)
+decode_quoted_string_inplace (GString *quoted_gstring)
 {
+	char *quoted_string = quoted_gstring->str;
 	char *src, *dst;
 
 	src = quoted_string + 1;
@@ -661,10 +662,11 @@ decode_quoted_string (char *quoted_string)
 }
 
 static gboolean
-decode_rfc5987 (char *encoded_string)
+decode_rfc5987_inplace (GString *encoded_gstring)
 {
 	char *q, *decoded;
 	gboolean iso_8859_1 = FALSE;
+	const char *encoded_string = encoded_gstring->str;
 
 	q = strchr (encoded_string, '\'');
 	if (!q)
@@ -696,14 +698,7 @@ decode_rfc5987 (char *encoded_string)
 		decoded = utf8;
 	}
 
-	/* If encoded_string was UTF-8, then each 3-character %-escape
-	 * will be converted to a single byte, and so decoded is
-	 * shorter than encoded_string. If encoded_string was
-	 * iso-8859-1, then each 3-character %-escape will be
-	 * converted into at most 2 bytes in UTF-8, and so it's still
-	 * shorter.
-	 */
-	strcpy (encoded_string, decoded);
+	g_string_assign (encoded_gstring, decoded);
 	g_free (decoded);
 	return TRUE;
 }
@@ -713,15 +708,17 @@ parse_param_list (const char *header, char delim, gboolean strict)
 {
 	GHashTable *params;
 	GSList *list, *iter;
-	char *item, *eq, *name_end, *value;
-	gboolean override, duplicated;
 
 	params = g_hash_table_new_full (soup_str_case_hash, 
 					soup_str_case_equal,
-					g_free, NULL);
+					g_free, g_free);
 
 	list = parse_list (header, delim);
 	for (iter = list; iter; iter = iter->next) {
+		char *item, *eq, *name_end;
+		gboolean override, duplicated;
+		GString *parsed_value = NULL;
+
 		item = iter->data;
 		override = FALSE;
 
@@ -736,19 +733,19 @@ parse_param_list (const char *header, char delim, gboolean strict)
 
 			*name_end = '\0';
 
-			value = (char *)skip_lws (eq + 1);
+			parsed_value = g_string_new ((char *)skip_lws (eq + 1));
 
 			if (name_end[-1] == '*' && name_end > item + 1) {
 				name_end[-1] = '\0';
-				if (!decode_rfc5987 (value)) {
+				if (!decode_rfc5987_inplace (parsed_value)) {
+					g_string_free (parsed_value, TRUE);
 					g_free (item);
 					continue;
 				}
 				override = TRUE;
-			} else if (*value == '"')
-				decode_quoted_string (value);
-		} else
-			value = NULL;
+			} else if (parsed_value->str[0] == '"')
+				decode_quoted_string_inplace (parsed_value);
+		}
 
 		duplicated = g_hash_table_lookup_extended (params, item, NULL, NULL);
 
@@ -756,11 +753,16 @@ parse_param_list (const char *header, char delim, gboolean strict)
 			soup_header_free_param_list (params);
 			params = NULL;
 			g_slist_foreach (iter, (GFunc)g_free, NULL);
+			if (parsed_value)
+				g_string_free (parsed_value, TRUE);
 			break;
-		} else if (override || !duplicated)
-			g_hash_table_replace (params, item, value);
-		else
+		} else if (override || !duplicated) {
+			g_hash_table_replace (params, item, parsed_value ? g_string_free (parsed_value, FALSE) : NULL);
+		} else {
+			if (parsed_value)
+				g_string_free (parsed_value, TRUE);
 			g_free (item);
+		}
 	}
 
 	g_slist_free (list);
-- 
GitLab

