From 10f59315ee35af1bcc4543a2dca9d227385ac1e5 Mon Sep 17 00:00:00 2001
From: Patrick Griffis <pgriffis@igalia.com>
Date: Fri, 27 Dec 2024 18:00:39 -0600
Subject: [PATCH] soup_message_headers_get_content_disposition: strdup
 truncated filenames

This table frees the strings it contains.

Signed-off-by: Kshitiz Godara <kgodara@microsoft.com>
---
 libsoup/soup-message-headers.c |  2 +-
 tests/header-parsing-test.c    | 29 +++++++++++++++--------------
 2 files changed, 16 insertions(+), 15 deletions(-)

diff --git a/libsoup/soup-message-headers.c b/libsoup/soup-message-headers.c
index bcee5b9..18cbf98 100644
--- a/libsoup/soup-message-headers.c
+++ b/libsoup/soup-message-headers.c
@@ -1611,7 +1611,7 @@ soup_message_headers_get_content_disposition (SoupMessageHeaders  *hdrs,
 		char *filename = strrchr (orig_value, '/');
 
 		if (filename)
-			g_hash_table_insert (*params, g_strdup (orig_key), filename + 1);
+			g_hash_table_insert (*params, g_strdup (orig_key), g_strdup (filename + 1));
 	}
 	return TRUE;
 }
diff --git a/tests/header-parsing-test.c b/tests/header-parsing-test.c
index 5e423d2..8bf4821 100644
--- a/tests/header-parsing-test.c
+++ b/tests/header-parsing-test.c
@@ -1107,36 +1107,37 @@ do_content_disposition_tests (void)
 	g_assert_cmpstr (filename, ==, RFC5987_TEST_FALLBACK_FILENAME);
 	g_hash_table_destroy (params);
 
-        /* Invalid disposition with only a filename still works */
-        soup_message_headers_clear (hdrs);
-        soup_message_headers_append (hdrs, "Content-Disposition",
-				     RFC5987_TEST_HEADER_NO_TYPE);
+	/* Invalid disposition with only a filename still works */
+	soup_message_headers_clear (hdrs);
+	soup_message_headers_append (hdrs, "Content-Disposition",
+			RFC5987_TEST_HEADER_NO_TYPE);
 	if (!soup_message_headers_get_content_disposition (hdrs,
 							   &disposition,
 							   &params)) {
 		soup_test_assert (FALSE, "filename-only decoding FAILED");
 		return;
 	}
-        g_assert_null (disposition);
-        filename = g_hash_table_lookup (params, "filename");
+	g_assert_null (disposition);
+	filename = g_hash_table_lookup (params, "filename");
 	g_assert_cmpstr (filename, ==, RFC5987_TEST_FALLBACK_FILENAME);
 	g_hash_table_destroy (params);
 
-        /* Invalid disposition with only two parameters still works */
-        soup_message_headers_clear (hdrs);
-        soup_message_headers_append (hdrs, "Content-Disposition",
-				     RFC5987_TEST_HEADER_NO_TYPE_2);
+	/* Invalid disposition with only two parameters still works */
+	soup_message_headers_clear (hdrs);
+	soup_message_headers_append (hdrs, "Content-Disposition",
+			RFC5987_TEST_HEADER_NO_TYPE_2);
 	if (!soup_message_headers_get_content_disposition (hdrs,
 							   &disposition,
 							   &params)) {
 		soup_test_assert (FALSE, "only two parameters decoding FAILED");
 		return;
 	}
-        g_assert_null (disposition);
-        filename = g_hash_table_lookup (params, "filename");
+	g_assert_null (disposition);
+	g_free (disposition);
+	filename = g_hash_table_lookup (params, "filename");
 	g_assert_cmpstr (filename, ==, RFC5987_TEST_FALLBACK_FILENAME);
-        parameter2 = g_hash_table_lookup (params, "foo");
-        g_assert_cmpstr (parameter2, ==, "bar");
+	parameter2 = g_hash_table_lookup (params, "foo");
+	g_assert_cmpstr (parameter2, ==, "bar");
 	g_hash_table_destroy (params);
 
 	soup_message_headers_unref (hdrs);
-- 
2.45.3

