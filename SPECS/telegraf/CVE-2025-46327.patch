From ba94a4800e23621eff558ef18ce4b96ec5489ff0 Mon Sep 17 00:00:00 2001
From: Piotr Fus <piotr.fus@snowflake.com>
Date: Mon, 28 Apr 2025 15:15:00 +0200
Subject: [PATCH] SNOW-1155452 Fix race condition on perm checking for easy
 logging (#1382)

Upstream Patch Link: https://github.com/snowflakedb/gosnowflake/commit/ba94a4800e23621eff558ef18ce4b96ec5489ff0.patch
---
 .../gosnowflake/client_configuration.go       | 25 ++----------
 .../gosnowflake/os_specific_posix.go          | 38 +++++++++++++++++++
 .../gosnowflake/os_specific_windows.go        |  8 ++++
 .../gosnowflake/secure_storage_manager.go     | 37 +++++++++++-------
 4 files changed, 73 insertions(+), 35 deletions(-)

diff --git a/vendor/github.com/snowflakedb/gosnowflake/client_configuration.go b/vendor/github.com/snowflakedb/gosnowflake/client_configuration.go
index 0f6526d4..a28dc0f7 100644
--- a/vendor/github.com/snowflakedb/gosnowflake/client_configuration.go
+++ b/vendor/github.com/snowflakedb/gosnowflake/client_configuration.go
@@ -9,7 +9,6 @@ import (
 	"os"
 	"path"
 	"path/filepath"
-	"runtime"
 	"strings"
 )
 
@@ -117,11 +116,9 @@ func parseClientConfiguration(filePath string) (*ClientConfig, error) {
 	if filePath == "" {
 		return nil, nil
 	}
-	fileContents, err := os.ReadFile(filePath)
-	if err != nil {
-		return nil, parsingClientConfigError(err)
-	}
-	err = validateCfgPerm(filePath)
+	// Check if group (5th LSB) or others (2nd LSB) have a write permission to the file
+	expectedPerm := os.FileMode(1<<4 | 1<<1)
+	fileContents, err := getFileContents(filePath, expectedPerm)
 	if err != nil {
 		return nil, parsingClientConfigError(err)
 	}
@@ -187,22 +184,6 @@ func validateLogLevel(clientConfig ClientConfig) error {
 	return nil
 }
 
-func validateCfgPerm(filePath string) error {
-	if runtime.GOOS == "windows" {
-		return nil
-	}
-	stat, err := os.Stat(filePath)
-	if err != nil {
-		return err
-	}
-	perm := stat.Mode()
-	// Check if group (5th LSB) or others (2nd LSB) have a write permission to the file
-	if perm&(1<<4) != 0 || perm&(1<<1) != 0 {
-		return fmt.Errorf("configuration file: %s can be modified by group or others", filePath)
-	}
-	return nil
-}
-
 func toLogLevel(logLevelString string) (string, error) {
 	var logLevel = strings.ToUpper(logLevelString)
 	switch logLevel {
diff --git a/vendor/github.com/snowflakedb/gosnowflake/os_specific_posix.go b/vendor/github.com/snowflakedb/gosnowflake/os_specific_posix.go
index 2d01f5c0..1a041b7a 100644
--- a/vendor/github.com/snowflakedb/gosnowflake/os_specific_posix.go
+++ b/vendor/github.com/snowflakedb/gosnowflake/os_specific_posix.go
@@ -4,6 +4,7 @@ package gosnowflake
 
 import (
 	"fmt"
+	"io"
 	"os"
 	"syscall"
 )
@@ -23,3 +24,40 @@ func provideOwnerFromStat(info os.FileInfo, filepath string) (uint32, error) {
 	}
 	return nativeStat.Uid, nil
 }
+
+func getFileContents(filePath string, expectedPerm os.FileMode) ([]byte, error) {
+	// open the file with read only and no symlink flags
+	file, err := os.OpenFile(filePath, syscall.O_RDONLY|syscall.O_NOFOLLOW, 0)
+	if err != nil {
+		return nil, err
+	}
+	defer file.Close()
+
+	// validate file permissions and owner
+	if err = validateFilePermissionBits(file, expectedPerm); err != nil {
+		return nil, err
+	}
+	if err = ensureFileOwner(file); err != nil {
+		return nil, err
+	}
+
+	// read the file
+	fileContents, err := io.ReadAll(file)
+	if err != nil {
+		return nil, err
+	}
+
+	return fileContents, nil
+}
+
+func validateFilePermissionBits(f *os.File, expectedPerm os.FileMode) error {
+	fileInfo, err := f.Stat()
+	if err != nil {
+		return err
+	}
+	filePerm := fileInfo.Mode()
+	if filePerm&expectedPerm != 0 {
+		return fmt.Errorf("incorrect permissions of %s", f.Name())
+	}
+	return nil
+}
diff --git a/vendor/github.com/snowflakedb/gosnowflake/os_specific_windows.go b/vendor/github.com/snowflakedb/gosnowflake/os_specific_windows.go
index 293123e0..7303ed1a 100644
--- a/vendor/github.com/snowflakedb/gosnowflake/os_specific_windows.go
+++ b/vendor/github.com/snowflakedb/gosnowflake/os_specific_windows.go
@@ -10,3 +10,11 @@ import (
 func provideFileOwner(file *os.File) (uint32, error) {
 	return 0, errors.New("provideFileOwner is unsupported on windows")
 }
+
+func getFileContents(filePath string, expectedPerm os.FileMode) ([]byte, error) {
+	fileContents, err := os.ReadFile(filePath)
+	if err != nil {
+		return nil, err
+	}
+	return fileContents, nil
+}
diff --git a/vendor/github.com/snowflakedb/gosnowflake/secure_storage_manager.go b/vendor/github.com/snowflakedb/gosnowflake/secure_storage_manager.go
index a823a52e..7c173e5a 100644
--- a/vendor/github.com/snowflakedb/gosnowflake/secure_storage_manager.go
+++ b/vendor/github.com/snowflakedb/gosnowflake/secure_storage_manager.go
@@ -8,7 +8,6 @@ import (
 	"encoding/json"
 	"errors"
 	"fmt"
-	"github.com/99designs/keyring"
 	"io"
 	"os"
 	"os/user"
@@ -18,6 +17,8 @@ import (
 	"strings"
 	"sync"
 	"time"
+
+	"github.com/99designs/keyring"
 )
 
 type tokenType string
@@ -199,11 +200,19 @@ func (ssm *fileBasedSecureStorageManager) withCacheFile(action func(*os.File)) {
 		}
 	}(cacheDir)
 
-	if err := ssm.ensurePermissionsAndOwner(cacheFile, 0600); err != nil {
+	if err := ensureFileOwner(cacheFile); err != nil {
+		logger.Warnf("failed to ensure owner for temporary cache file. %v", err)
+		return
+	}
+	if err := ensureFilePermissions(cacheFile, 0600); err != nil {
 		logger.Warnf("failed to ensure permission for temporary cache file. %v", err)
 		return
 	}
-	if err := ssm.ensurePermissionsAndOwner(cacheDir, 0700|os.ModeDir); err != nil {
+	if err := ensureFileOwner(cacheDir); err != nil {
+		logger.Warnf("failed to ensure owner for temporary cache dir. %v", err)
+		return
+	}
+	if err := ensureFilePermissions(cacheDir, 0700|os.ModeDir); err != nil {
 		logger.Warnf("failed to ensure permission for temporary cache dir. %v", err)
 		return
 	}
@@ -318,16 +327,7 @@ func (ssm *fileBasedSecureStorageManager) credFilePath() string {
 	return filepath.Join(ssm.credDirPath, credCacheFileName)
 }
 
-func (ssm *fileBasedSecureStorageManager) ensurePermissionsAndOwner(f *os.File, expectedMode os.FileMode) error {
-	fileInfo, err := f.Stat()
-	if err != nil {
-		return err
-	}
-
-	if fileInfo.Mode().Perm() != expectedMode&os.ModePerm {
-		return fmt.Errorf("incorrect permissions(%v, expected %v) for credential file", fileInfo.Mode(), expectedMode)
-	}
-
+func ensureFileOwner(f *os.File) error {
 	ownerUID, err := provideFileOwner(f)
 	if err != nil && !errors.Is(err, os.ErrNotExist) {
 		return err
@@ -345,6 +345,17 @@ func (ssm *fileBasedSecureStorageManager) ensurePermissionsAndOwner(f *os.File,
 	return nil
 }
 
+func ensureFilePermissions(f *os.File, expectedMode os.FileMode) error {
+	fileInfo, err := f.Stat()
+	if err != nil {
+		return err
+	}
+	if fileInfo.Mode().Perm() != expectedMode&os.ModePerm {
+		return fmt.Errorf("incorrect permissions(%v, expected %v) for credential file", fileInfo.Mode(), expectedMode)
+	}
+	return nil
+}
+
 func (ssm *fileBasedSecureStorageManager) readTemporaryCacheFile(cacheFile *os.File) (map[string]any, error) {
 
 	jsonData, err := io.ReadAll(cacheFile)
-- 
2.34.1
