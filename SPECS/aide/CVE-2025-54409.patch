From fbd518af5244bf137e60a515d0eb6d0c10029dbf Mon Sep 17 00:00:00 2001
From: AllSpark <allspark@microsoft.com>
Date: Tue, 19 Aug 2025 06:56:57 +0000
Subject: [PATCH] Fix null pointer dereference after reading incorrectly
 encoded xattr attributes from database\n\n- fix handling of empty xattr
 values\n- fix handling of xattr keys containing a comma\n- addresses
 CVE-2025-54409\n- thanks to Rajesh Pangare for reporting this issue

Signed-off-by: Azure Linux Security Servicing Account <azurelinux-security@microsoft.com>
Upstream-reference: AI Backport of https://github.com/aide/aide/commit/64c8f32b0349c33fb8382784af468338078851f9.patch
---
 ChangeLog     | 10 ++++++++++
 src/db.c      | 29 ++++++++++++++++++++---------
 src/db_file.c |  9 ++++++++-
 src/util.c    |  2 +-
 4 files changed, 39 insertions(+), 11 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 69a6fd5..5e187f3 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,4 +1,14 @@
 2023-08-01 Hannes von Haugwitz <hannes@vonhaugwitz.com>
+2025-08-07 Hannes von Haugwitz <hannes@vonhaugwitz.com>
+	* Escape control characters in report and log output (CVE-2025-54389),
+	  thanks to Rajesh Pangare for reporting this issue
+	* Fix null pointer dereference after reading incorrectly encoded xattr
+	  attributes from database (CVE-2025-54409)
+	  - fix handling of empty xattr values
+	  - fix handling of xattr keys containing a comma
+	  - thanks to Rajesh Pangare for reporting this issue
+
+
 	* Release aide 0.18.6
 
 2023-07-22 Hannes von Haugwitz <hannes@vonhaugwitz.com>
diff --git a/src/db.c b/src/db.c
index dfcc973..87215ac 100644
--- a/src/db.c
+++ b/src/db.c
@@ -351,17 +351,28 @@ db_line* db_char2line(char** ss, database* db){
           num = 0;
           while (num < line->xattrs->num)
           {
-            byte  *val = NULL;
-            size_t vsz = 0;
-            
             tval = strtok(NULL, ",");
-            line->xattrs->ents[num].key = db_readchar(checked_strdup(tval));
+            decode_string(tval);
+            line->xattrs->ents[num].key = checked_strdup(tval);
             tval = strtok(NULL, ",");
-            val = base64tobyte(tval, strlen(tval), &vsz);
-            line->xattrs->ents[num].val = val;
-            line->xattrs->ents[num].vsz = vsz;
-
-            ++num;
+            if (strcmp(tval,"0") != 0) {
+                line->xattrs->ents[num].val = decode_base64(tval, strlen(tval), &line->xattrs->ents[num].vsz);
+            } else {
+                line->xattrs->ents[num].val = checked_strdup("");
+                line->xattrs->ents[num].vsz = 0;
+            }
+            if (line->xattrs->ents[num].val == NULL) {
+                LOG_DB_FORMAT_LINE(LOG_LEVEL_WARNING, "error while reading xattrs for '%s' from database (discarding extended attributes)", line->filename)
+                for (int j = num; j >= 0 ; --j) {
+                    free(line->xattrs->ents[j].key);
+                    line->xattrs->ents[j].key = NULL;
+                    free(line->xattrs->ents[j].val);
+                    line->xattrs->ents[j].val = NULL;
+                }
+                line->xattrs->num = 0;
+            } else {
+                ++num;
+            }
           }
         }
 #endif
diff --git a/src/db_file.c b/src/db_file.c
index 60f8234..68b2ddf 100644
--- a/src/db_file.c
+++ b/src/db_file.c
@@ -654,7 +654,14 @@ int db_writeline_file(db_line* line,db_config* dbconf, url_t* url){
         while (num < line->xattrs->num)
         {
           dofprintf(",");
-          db_writechar(xattr->key, dbconf->database_out.fp, 0);
+          {
+            char *enc_key = NULL;
+            if (contains_unsafe(xattr->key)) {
+              enc_key = encode_string(xattr->key);
+            }
+            dofprintf("%s", enc_key?enc_key:xattr->key);
+            free(enc_key);
+          }
           dofprintf(",");
           db_write_byte_base64(xattr->val, xattr->vsz, dbconf->database_out.fp, 0, 1, 1);
           
diff --git a/src/util.c b/src/util.c
index 87f6801..0f3e88e 100644
--- a/src/util.c
+++ b/src/util.c
@@ -45,7 +45,7 @@
 #include "util.h"
 #include "errorcodes.h"
 
-#define URL_UNSAFE " <>\"#%{}|\\^~[]`@:\033'"
+#define URL_UNSAFE " <>\"#%{}|\\^~[]`@:\033',"
 #define ISPRINT(c) (isascii(c) && isprint(c))
 
 const char* btoa(bool b) {
-- 
2.45.4

