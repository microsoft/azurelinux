From e9d99bb43bdc8ceb5db47172b0ac7aa2b87d4090 Mon Sep 17 00:00:00 2001
From: Kanishk-Bansal <kbkanishk975@gmail.com>
Date: Fri, 9 May 2025 12:06:14 +0000
Subject: [PATCH] CVE-2024-47619

Patch is applied to different files than the upstream patch as func tls_wildcard_match is present there in the version 3.33.2

Upstream Patch Reference: https://github.com/syslog-ng/syslog-ng/commit/dadfdbecde5bfe710b0a6ee5699f96926b3f9006
---
 lib/tlscontext.c | 86 +++++++++++++++++++++++++++++++++++++++++-------
 lib/tlscontext.h |  2 ++
 2 files changed, 77 insertions(+), 11 deletions(-)

diff --git a/lib/tlscontext.c b/lib/tlscontext.c
index 8a88eec..bf4d800 100644
--- a/lib/tlscontext.c
+++ b/lib/tlscontext.c
@@ -1,4 +1,6 @@
 /*
+ * Copyright (c) 2024 One Identity LLC.
+ * Copyright (c) 2024 Franco Fichtner
  * Copyright (c) 2002-2011 Balabit
  * Copyright (c) 1998-2011 Bal√°zs Scheidler
  *
@@ -1097,7 +1099,7 @@ tls_log_certificate_validation_progress(int ok, X509_STORE_CTX *ctx)
   g_string_free(issuer_name, TRUE);
 }
 
-static gboolean
+gboolean
 tls_wildcard_match(const gchar *host_name, const gchar *pattern)
 {
   gchar **pattern_parts, **hostname_parts;
@@ -1108,22 +1110,84 @@ tls_wildcard_match(const gchar *host_name, const gchar *pattern)
 
   pattern_parts = g_strsplit(pattern, ".", 0);
   hostname_parts = g_strsplit(host_name, ".", 0);
-  for (i = 0; pattern_parts[i]; i++)
+
+  if(g_strrstr(pattern, "\?"))
+    {
+      /* Glib would treat any question marks as jokers */
+      success = FALSE;
+    }
+  else if (g_hostname_is_ip_address(host_name))
     {
-      if (!hostname_parts[i])
+      /* no wildcards in IP */
+      if (g_strrstr(pattern, "*"))
         {
-          /* number of dot separated entries is not the same in the hostname and the pattern spec */
-          goto exit;
+          success = FALSE;
         }
+      else
+        {
+          struct in6_addr host_buffer, pattern_buffer;
+          gint INET_TYPE, INET_ADDRLEN;
+          if(strstr(host_name, ":"))
+            {
+              INET_TYPE = AF_INET6;
+              INET_ADDRLEN = INET6_ADDRSTRLEN;
+            }
+          else
+            {
+              INET_TYPE = AF_INET;
+              INET_ADDRLEN = INET_ADDRSTRLEN;
+            }
+          char host_ip[INET_ADDRLEN], pattern_ip[INET_ADDRLEN];
+          gint host_ip_ok = inet_pton(INET_TYPE, host_name, &host_buffer);
+          gint pattern_ip_ok = inet_pton(INET_TYPE, pattern, &pattern_buffer);
+          inet_ntop(INET_TYPE, &host_buffer, host_ip, INET_ADDRLEN);
+          inet_ntop(INET_TYPE, &pattern_buffer, pattern_ip, INET_ADDRLEN);
+          success = (host_ip_ok && pattern_ip_ok && strcmp(host_ip, pattern_ip) == 0);
+        }
+    }
+  else
+    {
+      if (pattern_parts[0] == NULL)
+        {
+          if (hostname_parts[0] == NULL)
+            success = TRUE;
+          else
+            success = FALSE;
+        }
+      else
+        {
+          success = TRUE;
+          for (i = 0; pattern_parts[i]; i++)
+            {
+              if (hostname_parts[i] == NULL)
+                {
+                  /* number of dot separated entries is not the same in the hostname and the pattern spec */
+                  success = FALSE;
+                  break;
+                }
+              char *wildcard_matched = g_strrstr(pattern_parts[i], "*");
+              if (wildcard_matched && (i != 0 || wildcard_matched != strstr(pattern_parts[i], "*")))
+                {
+                  /* wildcard only on leftmost part and never as multiple wildcards as per both RFC 6125 and 9525 */
+                  success = FALSE;
+                  break;
+                }
 
-      lower_pattern = g_ascii_strdown(pattern_parts[i], -1);
-      lower_hostname = g_ascii_strdown(hostname_parts[i], -1);
+              lower_pattern = g_ascii_strdown(pattern_parts[i], -1);
+              lower_hostname = g_ascii_strdown(hostname_parts[i], -1);
 
-      if (!g_pattern_match_simple(lower_pattern, lower_hostname))
-        goto exit;
+              if (!g_pattern_match_simple(lower_pattern, lower_hostname))
+                {
+                  success = FALSE;
+                  break;
+                }
+            }
+          if (hostname_parts[i])
+            /* hostname has more parts than the pattern */
+            success = FALSE;
+        }
     }
-  success = TRUE;
-exit:
+
   g_free(lower_pattern);
   g_free(lower_hostname);
   g_strfreev(pattern_parts);
diff --git a/lib/tlscontext.h b/lib/tlscontext.h
index acca919..daebdfc 100644
--- a/lib/tlscontext.h
+++ b/lib/tlscontext.h
@@ -110,6 +110,8 @@ TLSVerifier *tls_verifier_new(TLSSessionVerifyFunc verify_func, gpointer verify_
 TLSVerifier *tls_verifier_ref(TLSVerifier *self);
 void tls_verifier_unref(TLSVerifier *self);
 
+gboolean tls_wildcard_match(const gchar *host_name, const gchar *pattern);
+
 
 void tls_session_configure_allow_compress(TLSSession *tls_session, gboolean allow_compress);
 gboolean tls_context_set_verify_mode_by_name(TLSContext *self, const gchar *mode_str);
-- 
2.45.2

