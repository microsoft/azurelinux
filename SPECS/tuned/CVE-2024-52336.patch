From 391843d28461cf2904dd646bd845e2203132497f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jaroslav=20=C5=A0karvada?= <jskarvad@redhat.com>
Date: Tue, 26 Nov 2024 13:52:17 +0100
Subject: [PATCH] new release (2.15.1)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Jaroslav Škarvada <jskarvad@redhat.com>

Modified patch 90c24eea037c7a5e9414c93f8fb3e549ed4a7b06 to apply to CBL-Mariner
Modified-by: Sandeep Karambelkar <skarambelkar@microsoft.com>
---
 com.redhat.tuned.policy        | 14 +++++++-------
 tuned.spec                     | 10 +++++++++-
 tuned/consts.py                |  4 ++++
 tuned/daemon/controller.py     | 15 +++++++++------
 tuned/plugins/base.py          | 12 ++++++++++++
 tuned/plugins/plugin_script.py |  4 ++++
 tuned/utils/commands.py        |  4 ++++
 tuned/version.py               |  2 +-
 8 files changed, 50 insertions(+), 15 deletions(-)

diff --git a/com.redhat.tuned.policy b/com.redhat.tuned.policy
index 824ae0c..89206f0 100644
--- a/com.redhat.tuned.policy
+++ b/com.redhat.tuned.policy
@@ -43,7 +43,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
@@ -103,7 +103,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
@@ -113,7 +113,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
@@ -123,7 +123,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
@@ -163,7 +163,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
@@ -193,7 +193,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
@@ -203,7 +203,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
@@ -223,7 +223,7 @@
     <defaults>
       <allow_any>auth_admin</allow_any>
       <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>yes</allow_active>
+      <allow_active>auth_admin</allow_active>
     </defaults>
   </action>
 
diff --git a/tuned.spec b/tuned.spec
index 66e0936..d395829 100644
--- a/tuned.spec
+++ b/tuned.spec
@@ -44,7 +44,7 @@
 
 Summary: A dynamic adaptive system tuning daemon
 Name: tuned
-Version: 2.21.0
+Version: 2.21.1
 Release: 1%{?prerel1}%{?with_snapshot:.%{git_suffix}}%{?dist}
 License: GPLv2+
 Source0: https://github.com/redhat-performance/%{name}/archive/v%{version}%{?prerel2}/%{name}-%{version}%{?prerel2}.tar.gz
@@ -557,6 +557,14 @@ fi
 %{_mandir}/man7/tuned-profiles-openshift.7*
 
 %changelog
+* Tue Nov 26 2024 Jaroslav Škarvada <jskarvad@redhat.com> - 2.21.1-1
+- new release
+  - fixed privileged execution of arbitrary scripts by active local user
+    resolves: CVE-2024-52336
+  - added sanity checks for API methods parameters
+    resolves: CVE-2024-52337
+  - tuned-ppd: fixed controller init to correctly set _on_battery
+
 * Tue Aug 29 2023 Jaroslav Škarvada <jskarvad@redhat.com> - 2.21.0-1
 - new release
   - rebased tuned to latest upstream
diff --git a/tuned/consts.py b/tuned/consts.py
index b7fb215..7d22748 100644
--- a/tuned/consts.py
+++ b/tuned/consts.py
@@ -1,4 +1,8 @@
 import logging
+import string
+
+NAMES_ALLOWED_CHARS = string.ascii_letters + string.digits + " !@'+-.,/:;_$&*()%<=>?#[]{|}^~" + '"'
+NAMES_MAX_LENGTH = 4096
 
 GLOBAL_CONFIG_FILE = "/etc/tuned/tuned-main.conf"
 ACTIVE_PROFILE_FILE = "/etc/tuned/active_profile"
diff --git a/tuned/daemon/controller.py b/tuned/daemon/controller.py
index 1292a8a..e637ab4 100644
--- a/tuned/daemon/controller.py
+++ b/tuned/daemon/controller.py
@@ -182,6 +182,8 @@ class Controller(tuned.exports.interfaces.ExportableInterface):
 	def switch_profile(self, profile_name, caller = None):
 		if caller == "":
 			return (False, "Unauthorized")
+		if not self._cmd.is_valid_name(profile_name):
+			return (False, "Invalid profile_name")
 		return self._switch_profile(profile_name, True)
 
 	@exports.export("", "(bs)")
@@ -255,7 +257,7 @@ class Controller(tuned.exports.interfaces.ExportableInterface):
 
 	@exports.export("s", "(bsss)")
 	def profile_info(self, profile_name, caller = None):
-		if caller == "":
+		if caller == "" or not self._cmd.is_valid_name(profile_name):
 			return tuple(False, "", "", "")
 		if profile_name is None or profile_name == "":
 			profile_name = self.active_profile()
@@ -287,7 +289,7 @@ class Controller(tuned.exports.interfaces.ExportableInterface):
 		dictionary -- {plugin_name: {parameter_name: default_value}}
 		"""
 		if caller == "":
-			return False
+			return {}
 		plugins = {}
 		for plugin_class in self._daemon.get_all_plugins():
 			plugin_name = plugin_class.__module__.split(".")[-1].split("_", 1)[1]
@@ -300,8 +302,8 @@ class Controller(tuned.exports.interfaces.ExportableInterface):
 	@exports.export("s","s")
 	def get_plugin_documentation(self, plugin_name, caller = None):
 		"""Return docstring of plugin's class"""
-		if caller == "":
-			return False
+		if caller == "" or not self._cmd.is_valid_name(plugin_name):
+			return ""
 		return self._daemon.get_plugin_documentation(str(plugin_name))
 
 	@exports.export("s","a{ss}")
@@ -314,8 +316,8 @@ class Controller(tuned.exports.interfaces.ExportableInterface):
 		Return:
 		dictionary -- {parameter_name: hint}
 		"""
-		if caller == "":
-			return False
+		if caller == "" or not self._cmd.is_valid_name(plugin_name):
+			return {}
 		return self._daemon.get_plugin_hints(str(plugin_name))
 
 	@exports.export("s", "b")
@@ -328,7 +330,7 @@ class Controller(tuned.exports.interfaces.ExportableInterface):
 		Return:
 		bool -- True on success
 		"""
-		if caller == "":
+		if caller == "" or not self._cmd.is_valid_name(path):
 			return False
 		if self._daemon._application and self._daemon._application._unix_socket_exporter:
 			self._daemon._application._unix_socket_exporter.register_signal_path(path)
@@ -342,6 +344,10 @@ class Controller(tuned.exports.interfaces.ExportableInterface):
 	def instance_acquire_devices(self, devices, instance_name, caller = None):
 		if caller == "":
 			return (False, "Unauthorized")
+		if not self._cmd.is_valid_name(devices):
+			return (False, "Invalid devices")
+		if not self._cmd.is_valid_name(instance_name):
+			return (False, "Invalid instance_name")
 		found = False
 		for instance_target in self._daemon._unit_manager.instances:
 			if instance_target.name == instance_name:
diff --git a/tuned/plugins/base.py b/tuned/plugins/base.py
index 0c70987..d6db6ca 100644
--- a/tuned/plugins/base.py
+++ b/tuned/plugins/base.py
@@ -212,6 +212,14 @@ class Plugin(object):
 	def _instance_post_static(self, instance, enabling):
 		pass
 
+	def _safe_script_path(self, path):
+		path = os.path.realpath(path)
+		profile_paths = self._global_cfg.get_list(consts.CFG_PROFILE_DIRS, consts.CFG_DEF_PROFILE_DIRS)
+		for p in profile_paths:
+			if path.startswith(p):
+				return True
+		return False
+
 	def _call_device_script(self, instance, script, op, devices, rollback = consts.ROLLBACK_SOFT):
 		if script is None:
 			return None
@@ -222,6 +230,10 @@ class Plugin(object):
 			log.error("Relative paths cannot be used in script_pre or script_post. " \
 				+ "Use ${i:PROFILE_DIR}.")
 			return False
+		if not self._safe_script_path(script):
+			log.error("Paths outside of the profile directories cannot be used in the " \
+				+ "script_pre or script_post, ignoring script: '%s'" % script)
+			return False
 		dir_name = os.path.dirname(script)
 		ret = True
 		for dev in devices:
diff --git a/tuned/plugins/plugin_script.py b/tuned/plugins/plugin_script.py
index ab605e4..5a5700f 100644
--- a/tuned/plugins/plugin_script.py
+++ b/tuned/plugins/plugin_script.py
@@ -75,6 +75,10 @@ class ScriptPlugin(base.Plugin):
 		for script in scripts:
 			environ = os.environ
 			environ.update(self._variables.get_env())
+			if not self._safe_script_path(script):
+				log.error("Paths outside of the profile directories cannot be used in the script, " \
+					+ "ignoring script: '%s'." % script)
+				continue
 			log.info("calling script '%s' with arguments '%s'" % (script, str(arguments)))
 			log.debug("using environment '%s'" % str(list(environ.items())))
 			try:
diff --git a/tuned/utils/commands.py b/tuned/utils/commands.py
index 177474e..5ed4b2a 100644
--- a/tuned/utils/commands.py
+++ b/tuned/utils/commands.py
@@ -523,3 +523,7 @@ class commands:
 					f.write(profile_name + "\n")
 		except (OSError,IOError) as e:
 			raise TunedException("Failed to save the active post-loaded profile: %s" % e.strerror)
+
+	# Checks if name contains only valid characters and has valid length or is empty string or None
+	def is_valid_name(self, name):
+		return not name or (all(c in consts.NAMES_ALLOWED_CHARS for c in name) and len(name) <= consts.NAMES_MAX_LENGTH)
diff --git a/tuned/version.py b/tuned/version.py
index 28ff450..305b20d 100644
--- a/tuned/version.py
+++ b/tuned/version.py
@@ -1,5 +1,5 @@
 TUNED_VERSION_MAJOR = 2
 TUNED_VERSION_MINOR = 21
-TUNED_VERSION_PATCH = 0
+TUNED_VERSION_PATCH = 1
 
 TUNED_VERSION_STR = "%d.%d.%d" % (TUNED_VERSION_MAJOR, TUNED_VERSION_MINOR, TUNED_VERSION_PATCH)
