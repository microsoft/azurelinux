From 63fa1e56a0aa97c1c06543c84d1147bf17034500 Mon Sep 17 00:00:00 2001
From: Sreenivasulu Malavathula <v-smalavathu@microsoft.com>
Date: Sat, 14 Jun 2025 06:36:59 -0500
Subject: [PATCH] Address CVE-2023-45803
Upstream Patch Reference: https://github.com/urllib3/urllib3/commit/4e98d57809dacab1cbe625fddeec1a290c478ea9

---
 .../pip/_vendor/urllib3/_collections.py       | 20 +++++++++++++++++++
 .../pip/_vendor/urllib3/connectionpool.py     |  5 +++++
 .../pip/_vendor/urllib3/poolmanager.py        |  7 +++++--
 3 files changed, 30 insertions(+), 2 deletions(-)

diff --git a/pip/_vendor/urllib3/_collections.py b/pip/_vendor/urllib3/_collections.py
index da9857e..0acf4da 100644
--- a/pip/_vendor/urllib3/_collections.py
+++ b/pip/_vendor/urllib3/_collections.py
@@ -22,6 +22,8 @@ from .exceptions import InvalidHeader
 from .packages import six
 from .packages.six import iterkeys, itervalues
 
+from typing_extensions import Self
+
 __all__ = ["RecentlyUsedContainer", "HTTPHeaderDict"]
 
 
@@ -268,6 +270,24 @@ class HTTPHeaderDict(MutableMapping):
         else:
             return vals[1:]
 
+    def _prepare_for_method_change(self) -> Self:
+        """
+        Remove content-specific header fields before changing the request
+        method to GET or HEAD according to RFC 9110, Section 15.4.
+        """
+        content_specific_headers = [
+            "Content-Encoding",
+            "Content-Language",
+            "Content-Location",
+            "Content-Type",
+            "Content-Length",
+            "Digest",
+            "Last-Modified",
+        ]
+        for header in content_specific_headers:
+            self.discard(header)
+        return self
+
     # Backwards compatibility for httplib
     getheaders = getlist
     getallmatchingheaders = getlist
diff --git a/pip/_vendor/urllib3/connectionpool.py b/pip/_vendor/urllib3/connectionpool.py
index 7087392..c701f78 100644
--- a/pip/_vendor/urllib3/connectionpool.py
+++ b/pip/_vendor/urllib3/connectionpool.py
@@ -8,6 +8,7 @@ import sys
 import warnings
 from socket import error as SocketError
 from socket import timeout as SocketTimeout
+from ._collections import HTTPHeaderDict
 
 from .connection import (
     BaseSSLError,
@@ -832,7 +833,11 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):
         redirect_location = redirect and response.get_redirect_location()
         if redirect_location:
             if response.status == 303:
+                # Change the method according to RFC 9110, Section 15.4.4.
                 method = "GET"
+                # And lose the body not to transfer anything sensitive.
+                body = None
+                headers = HTTPHeaderDict(headers)._prepare_for_method_change()
 
             try:
                 retries = retries.increment(method, url, response=response, _pool=self)
diff --git a/pip/_vendor/urllib3/poolmanager.py b/pip/_vendor/urllib3/poolmanager.py
index ca4ec34..5f4afe1 100644
--- a/pip/_vendor/urllib3/poolmanager.py
+++ b/pip/_vendor/urllib3/poolmanager.py
@@ -4,7 +4,7 @@ import collections
 import functools
 import logging
 
-from ._collections import RecentlyUsedContainer
+from ._collections import HTTPHeaderDict, RecentlyUsedContainer
 from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool, port_by_scheme
 from .exceptions import (
     LocationValueError,
@@ -382,9 +382,12 @@ class PoolManager(RequestMethods):
         # Support relative URLs for redirecting.
         redirect_location = urljoin(url, redirect_location)
 
-        # RFC 7231, Section 6.4.4
         if response.status == 303:
+            # Change the method according to RFC 9110, Section 15.4.4.
             method = "GET"
+            # And lose the body not to transfer anything sensitive.
+            kw["body"] = None
+            kw["headers"] = HTTPHeaderDict(kw["headers"])._prepare_for_method_change()
 
         retries = kw.get("retries")
         if not isinstance(retries, Retry):
-- 
2.45.2

