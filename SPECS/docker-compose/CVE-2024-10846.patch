From 217663fd8fd2b7b789c9f877bbd9781d887a6b07 Mon Sep 17 00:00:00 2001
From: Kanishk-Bansal <kbkanishk975@gmail.com>
Date: Mon, 3 Mar 2025 04:54:06 +0000
Subject: [PATCH] CVE-2024-10846
Upstream Reference: https://github.com/compose-spec/compose-go/pull/703
---
 .../compose-go/v2/loader/reset.go             | 28 ++++++++++++++++---
 1 file changed, 24 insertions(+), 4 deletions(-)

diff --git a/vendor/github.com/compose-spec/compose-go/v2/loader/reset.go b/vendor/github.com/compose-spec/compose-go/v2/loader/reset.go
index 2b7f04c..213d0e8 100644
--- a/vendor/github.com/compose-spec/compose-go/v2/loader/reset.go
+++ b/vendor/github.com/compose-spec/compose-go/v2/loader/reset.go
@@ -26,13 +26,15 @@ import (
 )
 
 type ResetProcessor struct {
-	target interface{}
-	paths  []tree.Path
+	target       interface{}
+	paths        []tree.Path
+	visitedNodes map[*yaml.Node]string
 }
 
 // UnmarshalYAML implement yaml.Unmarshaler
 func (p *ResetProcessor) UnmarshalYAML(value *yaml.Node) error {
 	resolved, err := p.resolveReset(value, tree.NewPath())
+	p.visitedNodes = nil
 	if err != nil {
 		return err
 	}
@@ -41,10 +43,28 @@ func (p *ResetProcessor) UnmarshalYAML(value *yaml.Node) error {
 
 // resolveReset detects `!reset` tag being set on yaml nodes and record position in the yaml tree
 func (p *ResetProcessor) resolveReset(node *yaml.Node, path tree.Path) (*yaml.Node, error) {
+	pathStr := path.String()
 	// If the path contains "<<", removing the "<<" element and merging the path
-	if strings.Contains(path.String(), ".<<") {
-		path = tree.NewPath(strings.Replace(path.String(), ".<<", "", 1))
+	if strings.Contains(pathStr, ".<<") {
+		path = tree.NewPath(strings.Replace(pathStr, ".<<", "", 1))
 	}
+
+	// Check for cycle
+	if p.visitedNodes == nil {
+		p.visitedNodes = make(map[*yaml.Node]string)
+	}
+
+	// Check for cycle by seeing if the node has already been visited at this path
+	if previousPath, found := p.visitedNodes[node]; found {
+		// If the current node has been visited, we have a cycle if the previous path is a prefix
+		if strings.HasPrefix(pathStr, previousPath) {
+			return nil, fmt.Errorf("cycle detected at path: %s", pathStr)
+		}
+	}
+
+	// Mark the current node as visited
+	p.visitedNodes[node] = pathStr
+
 	// If the node is an alias, We need to process the alias field in order to consider the !override and !reset tags
 	if node.Kind == yaml.AliasNode {
 		return p.resolveReset(node.Alias, path)
-- 
2.45.2

