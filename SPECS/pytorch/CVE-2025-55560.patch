From 225742838bcbf4656a90010257062188f7fcae82 Mon Sep 17 00:00:00 2001
From: Zhiyi Zhang <violin1781@gmail.com>
Date: Sat, 26 Apr 2025 21:02:29 +0000
Subject: [PATCH] Add an additional check to trigger graph break for sparse
 tensor (#151897)

Fixes #151522

This PR fixes the issue that Dynamo fails to trigger a graph break for sparse tensors in certain code paths. I added an additional check to handle this case, and it resolves the original problem.

Pull Request resolved: https://github.com/pytorch/pytorch/pull/151897
Approved by: https://github.com/jansel

Modified to apply to Azure Linux
Upstream Patch Reference: https://github.com/pytorch/pytorch/commit/225742838bcbf4656a90010257062188f7fcae82.patch
---
 test/dynamo/test_compile.py        | 13 +++++++++++++
 torch/_dynamo/variables/builtin.py | 11 +++++++++++
 2 files changed, 24 insertions(+)

diff --git a/test/dynamo/test_compile.py b/test/dynamo/test_compile.py
index 5b2de2b7..a38c1d3e 100644
--- a/test/dynamo/test_compile.py
+++ b/test/dynamo/test_compile.py
@@ -71,6 +71,19 @@ class InPlaceCompilationTests(unittest.TestCase):
             loaded_model = torch.jit.load(os.path.join(tmpdirname, "model.pt"))
             loaded_model(torch.randn(1, 10))
 
+    def test_to_sparse_to_dense_with_graph_break(self):
+        def fn(x):
+            x = x.to_sparse()
+            x = x.to_dense()
+            return x
+
+        x = torch.tensor([[1.0]])
+        c_fn = torch.compile(fn)
+
+        output = fn(x)
+        c_output = c_fn(x)
+        self.assertEqual(output, c_output)
+
 
 # The private variants of the below functions are extensively tested
 # So as long as the signatures match we're good
diff --git a/torch/_dynamo/variables/builtin.py b/torch/_dynamo/variables/builtin.py
index 2a2e9893..beababef 100644
--- a/torch/_dynamo/variables/builtin.py
+++ b/torch/_dynamo/variables/builtin.py
@@ -11,6 +11,7 @@ from typing import Dict, List
 
 import torch
 from torch import sym_float, sym_int
+from torch._subclasses.meta_utils import is_sparse_any
 
 from .. import config, polyfill, variables
 from ..exc import (
@@ -1226,6 +1227,16 @@ class BuiltinVariable(VariableTracker):
                 variables.UserDefinedObjectVariable,
             ),
         ):
+
+            if isinstance(obj, TensorVariable):
+                fake_val = obj.proxy.node.meta["example_value"]
+                if (
+                    isinstance(fake_val, torch.Tensor)
+                    and is_sparse_any(fake_val)
+                    and (not tx.export or not config.capture_sparse_compute)
+                ):
+                    unimplemented("torch.compile does not support sparse Tensors")
+
             try:
                 return obj.var_getattr(tx, name).clone(source=source)
             except NotImplementedError:
-- 
2.43.0

