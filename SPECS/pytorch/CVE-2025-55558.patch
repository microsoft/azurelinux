From 4e44ccc5fb3072646869f01d3463e9bbf5176374 Mon Sep 17 00:00:00 2001
From: AllSpark <allspark@microsoft.com>
Date: Wed, 1 Oct 2025 12:38:39 +0000
Subject: [PATCH] Backport: Disable parallel reduction under vec loop; add test
 and unskip flex attention per original.patch

Signed-off-by: Azure Linux Security Servicing Account <azurelinux-security@microsoft.com>
Upstream-reference: AI Backport of https://patch-diff.githubusercontent.com/raw/pytorch/pytorch/pull/151887.patch
---
 torch/_inductor/codegen/cpp.py | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/torch/_inductor/codegen/cpp.py b/torch/_inductor/codegen/cpp.py
index de6a3242..561e1ea0 100644
--- a/torch/_inductor/codegen/cpp.py
+++ b/torch/_inductor/codegen/cpp.py
@@ -2290,6 +2290,21 @@ class LoopNestWithSplit:
         2) All reduction or non-reduction levels
         When the loop is split at the top level, the max depth is 1.
         """
+        def get_simd_vec_depth(loops):
+            # Return the first loop level which is simd_vec
+            depth = 0
+            current = loops
+            while current:
+                # If any loop at this level is simd_vec, return this depth
+                if any(loop.simd_vec for loop in current):
+                    return depth
+                # Only descend if there is exactly one inner loop (no split)
+                if len(current) != 1:
+                    break
+                current = current[0].inner
+                depth += 1
+            return None
+
         max_depth = 0
         loops = self.root
         if len(loops) > 1:
@@ -2298,6 +2313,11 @@ class LoopNestWithSplit:
         while len(loops) == 1 and loops[0].is_reduction() == is_reduction:
             max_depth += 1
             loops = loops[0].inner
+
+        simd_vec_depth = get_simd_vec_depth(self.root)
+        if simd_vec_depth is not None and is_reduction and max_depth > simd_vec_depth:
+            # Disable parallel reduction under the vec loop
+            return simd_vec_depth
         return max_depth
 
     def is_reduction_only(self):
-- 
2.45.4

