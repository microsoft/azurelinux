From da8d7e3e086e0cef8aa3c40ccec4d2b5fbbe995c Mon Sep 17 00:00:00 2001
From: AllSpark <allspark@microsoft.com>
Date: Thu, 11 Sep 2025 15:51:08 +0000
Subject: [PATCH] types: use strings.EqualFold instead of lowering ourselves

Instead of using strings.ToLower and == to check case insensitive equality, use strings.EqualFold. This prevents unnecessary lowering of extremely long strings while preserving ASCII-insensitive comparisons.

Signed-off-by: Azure Linux Security Servicing Account <azurelinux-security@microsoft.com>
Upstream-reference: AI Backport of https://github.com/golang/text/commit/434eadcdbc3b0256971992e8c70027278364c72c.patch
---
 pkg/types/args.go | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/pkg/types/args.go b/pkg/types/args.go
index 7516f03..8d2cba3 100644
--- a/pkg/types/args.go
+++ b/pkg/types/args.go
@@ -29,11 +29,11 @@ type UnmarshallableBool bool
 // Returns boolean true if the string is "1" or "[Tt]rue"
 // Returns boolean false if the string is "0" or "[Ff]alse"
 func (b *UnmarshallableBool) UnmarshalText(data []byte) error {
-	s := strings.ToLower(string(data))
-	switch s {
-	case "1", "true":
+	s := string(data)
+	switch {
+	case s == "1" || strings.EqualFold(s, "true"):
 		*b = true
-	case "0", "false":
+	case s == "0" || strings.EqualFold(s, "false"):
 		*b = false
 	default:
 		return fmt.Errorf("boolean unmarshal error: invalid input %s", s)
-- 
2.45.4

