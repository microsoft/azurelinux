From e49c11a20182460dc5b6ab5112b8e6e5b45a473c Mon Sep 17 00:00:00 2001
From: Kanishk-Bansal <kbkanishk975@gmail.com>
Date: Thu, 13 Feb 2025 12:35:31 +0000
Subject: [PATCH] Fix CVE-2023-50966
Upstream Reference: https://github.com/potatosalad/erlang-jose/commit/718d213f07b08056737923f8063d5df56dcb66ae

---
 deps/jose/src/jose.erl                   | 18 +++++++++--
 deps/jose/src/jwa/jose_jwa.erl           |  2 +-
 deps/jose/src/jwe/jose_jwe_alg_pbes2.erl | 38 +++++++++++++++++++-----
 3 files changed, 46 insertions(+), 12 deletions(-)

diff --git a/deps/jose/src/jose.erl b/deps/jose/src/jose.erl
index 58e005d..fe47755 100644
--- a/deps/jose/src/jose.erl
+++ b/deps/jose/src/jose.erl
@@ -23,6 +23,8 @@
 -export([encode/1]).
 -export([json_module/0]).
 -export([json_module/1]).
+-export([pbes2_count_maximum/0]).
+-export([pbes2_count_maximum/1]).
 -export([sha3_module/0]).
 -export([sha3_module/1]).
 -export([unsecured_signing/0]).
@@ -84,17 +86,27 @@ json_module() ->
 json_module(JSONModule) when is_atom(JSONModule) ->
 	?MAYBE_START_JOSE(jose_server:json_module(JSONModule)).
 
+-spec pbes2_count_maximum() -> non_neg_integer().
+pbes2_count_maximum() ->
+	?MAYBE_START_JOSE(ets:lookup_element(?TAB, pbes2_count_maximum, 2)).
+
+-spec pbes2_count_maximum(PBES2CountMaximum) -> ok when PBES2CountMaximum :: non_neg_integer().
+pbes2_count_maximum(PBES2CountMaximum) when is_integer(PBES2CountMaximum) andalso PBES2CountMaximum >= 0 ->
+	?MAYBE_START_JOSE(jose_server:pbes2_count_maximum(PBES2CountMaximum)).
+
 sha3_module() ->
 	?MAYBE_START_JOSE(ets:lookup_element(?TAB, sha3_module, 2)).
 
 sha3_module(SHA3Module) when is_atom(SHA3Module) ->
 	?MAYBE_START_JOSE(jose_server:sha3_module(SHA3Module)).
 
+-spec unsecured_signing() -> boolean().
 unsecured_signing() ->
-	jose_jwa:unsecured_signing().
+	?MAYBE_START_JOSE(ets:lookup_element(?TAB, unsecured_signing, 2)).
 
-unsecured_signing(Boolean) when is_boolean(Boolean) ->
-	jose_jwa:unsecured_signing(Boolean).
+-spec unsecured_signing(UnsecuredSigning) -> ok when UnsecuredSigning :: boolean().
+unsecured_signing(UnsecuredSigning) when is_boolean(UnsecuredSigning) ->
+	?MAYBE_START_JOSE(jose_server:unsecured_signing(UnsecuredSigning)).
 
 xchacha20_poly1305_module() ->
 	?MAYBE_START_JOSE(ets:lookup_element(?TAB, xchacha20_poly1305_module, 2)).
diff --git a/deps/jose/src/jwa/jose_jwa.erl b/deps/jose/src/jwa/jose_jwa.erl
index 39fb565..394c796 100644
--- a/deps/jose/src/jwa/jose_jwa.erl
+++ b/deps/jose/src/jwa/jose_jwa.erl
@@ -368,7 +368,7 @@ supports() ->
 	].
 
 unsecured_signing() ->
-	application:get_env(jose, unsecured_signing, false).
+	jose:unsecured_signing().
 
 unsecured_signing(Boolean) when is_boolean(Boolean) ->
 	application:set_env(jose, unsecured_signing, Boolean),
diff --git a/deps/jose/src/jwe/jose_jwe_alg_pbes2.erl b/deps/jose/src/jwe/jose_jwe_alg_pbes2.erl
index 8c11f67..9bcc5f6 100644
--- a/deps/jose/src/jwe/jose_jwe_alg_pbes2.erl
+++ b/deps/jose/src/jwe/jose_jwe_alg_pbes2.erl
@@ -23,6 +23,7 @@
 -export([key_encrypt/3]).
 -export([next_cek/3]).
 %% API
+-export([format_error/2]).
 -export([hmac_supported/0]).
 -export([wrap_supported/0]).
 
@@ -99,22 +100,22 @@ key_decrypt(Password, {_ENCModule, _ENC, EncryptedKey}, #jose_jwe_alg_pbes2{hmac
 		when is_binary(Password)
 		andalso is_binary(IV)
 		andalso is_binary(TAG) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	jose_jwa:block_decrypt({aes_gcm, Bits}, DerivedKey, IV, {<<>>, EncryptedKey, TAG});
 key_decrypt(Password, {_ENCModule, _ENC, EncryptedKey}, #jose_jwe_alg_pbes2{hmac=HMAC, salt=Salt, iter=Iterations, wrap=aes_kw, bits=Bits}) when is_binary(Password) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	jose_jwa_aes_kw:unwrap(EncryptedKey, DerivedKey);
 key_decrypt(Password, {_ENCModule, _ENC, EncryptedKey}, #jose_jwe_alg_pbes2{hmac=HMAC, salt=Salt, iter=Iterations, wrap=c20p_kw, bits=Bits, iv=IV, tag=TAG})
 		when is_binary(Password)
 		andalso is_binary(IV)
 		andalso is_binary(TAG) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	jose_jwa:block_decrypt({chacha20_poly1305, Bits}, DerivedKey, IV, {<<>>, EncryptedKey, TAG});
 key_decrypt(Password, {_ENCModule, _ENC, EncryptedKey}, #jose_jwe_alg_pbes2{hmac=HMAC, salt=Salt, iter=Iterations, wrap=xc20p_kw, bits=Bits, iv=IV, tag=TAG})
 		when is_binary(Password)
 		andalso is_binary(IV)
 		andalso is_binary(TAG) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	jose_jwa:block_decrypt({xchacha20_poly1305, Bits}, DerivedKey, IV, {<<>>, EncryptedKey, TAG});
 key_decrypt(#jose_jwk{kty={KTYModule, KTY}}, EncryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{}) ->
 	key_decrypt(KTYModule:derive_key(KTY), EncryptedKey, JWEPBES2).
@@ -131,7 +132,7 @@ key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{hmac=HMAC, salt
 		andalso is_binary(Salt)
 		andalso is_integer(Iterations)
 		andalso is_binary(IV) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	{CipherText, CipherTag} = jose_jwa:block_encrypt({aes_gcm, Bits}, DerivedKey, IV, {<<>>, DecryptedKey}),
 	{CipherText, JWEPBES2#jose_jwe_alg_pbes2{ tag = CipherTag }};
 key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{hmac=HMAC, salt=Salt, iter=Iterations, wrap=aes_kw, bits=Bits})
@@ -139,7 +140,7 @@ key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{hmac=HMAC, salt
 		andalso is_binary(DecryptedKey)
 		andalso is_binary(Salt)
 		andalso is_integer(Iterations) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	{jose_jwa_aes_kw:wrap(DecryptedKey, DerivedKey), JWEPBES2};
 key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{hmac=HMAC, salt=Salt, iter=Iterations, wrap=c20p_kw, bits=Bits, iv=IV})
 		when is_binary(Password)
@@ -147,7 +148,7 @@ key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{hmac=HMAC, salt
 		andalso is_binary(Salt)
 		andalso is_integer(Iterations)
 		andalso is_binary(IV) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	{CipherText, CipherTag} = jose_jwa:block_encrypt({chacha20_poly1305, Bits}, DerivedKey, IV, {<<>>, DecryptedKey}),
 	{CipherText, JWEPBES2#jose_jwe_alg_pbes2{ tag = CipherTag }};
 key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{hmac=HMAC, salt=Salt, iter=Iterations, wrap=xc20p_kw, bits=Bits, iv=IV})
@@ -156,7 +157,7 @@ key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{hmac=HMAC, salt
 		andalso is_binary(Salt)
 		andalso is_integer(Iterations)
 		andalso is_binary(IV) ->
-	{ok, DerivedKey} = jose_jwa_pkcs5:pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
+	{ok, DerivedKey} = pbkdf2({hmac, HMAC}, Password, Salt, Iterations, (Bits div 8) + (Bits rem 8)),
 	{CipherText, CipherTag} = jose_jwa:block_encrypt({xchacha20_poly1305, Bits}, DerivedKey, IV, {<<>>, DecryptedKey}),
 	{CipherText, JWEPBES2#jose_jwe_alg_pbes2{ tag = CipherTag }};
 key_encrypt(Password, DecryptedKey, JWEPBES2=#jose_jwe_alg_pbes2{wrap=aes_gcm_kw, iv=undefined}) when is_binary(Password) ->
@@ -175,6 +176,12 @@ next_cek(_Key, {ENCModule, ENC}, ALG=#jose_jwe_alg_pbes2{}) ->
 %% API functions
 %%====================================================================
 
+-spec format_error(dynamic(), dynamic()) -> dynamic().
+format_error(_Reason, [{_M, _F, _As, Info} | _]) ->
+    ErrorInfo = proplists:get_value(error_info, Info, #{}),
+    ErrorDescription1 = maps:get(cause, ErrorInfo),
+    ErrorDescription1.
+
 hmac_supported() ->
 	[sha256, sha384, sha512].
 
@@ -197,6 +204,21 @@ from_map_pbes2(F=#{ <<"tag">> := TAG }, H) ->
 from_map_pbes2(F, H) ->
 	{H, F}.
 
+%% @private
+pbkdf2(Mac, Password, Salt, Iterations, DerivedKeyLen) ->
+	PBES2CountMaximum = jose:pbes2_count_maximum(),
+	case PBES2CountMaximum < Iterations of
+		false ->
+			jose_jwa_pkcs5:pbkdf2(Mac, Password, Salt, Iterations, DerivedKeyLen);
+		true ->
+			erlang:error(badarg, [Mac, <<"REDACTED">>, Salt, Iterations, DerivedKeyLen], [
+				{error_info, #{
+					module => ?MODULE,
+					cause => #{4 => lists:flatten(io_lib:format("maximum PBES2 iterations is set to ~w, but ~w was attempted (see jose:pbes2_count_maximum/0)", [PBES2CountMaximum, Iterations]))}
+				}}
+			])
+	end.
+
 %% @private
 to_map_pbes2(F, H=#jose_jwe_alg_pbes2{ iter = P2C }) when is_integer(P2C) ->
 	to_map_pbes2(F#{ <<"p2c">> => P2C }, H#jose_jwe_alg_pbes2{ iter = undefined });
-- 
2.45.2

