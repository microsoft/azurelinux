diff --git a/lib/wasm-micro-runtime-WAMR-1.3.0/core/iwasm/interpreter/wasm_loader.c b/lib/wasm-micro-runtime-WAMR-1.3.0/core/iwasm/interpreter/wasm_loader.c
index 2a06f42..506ee29 100644
--- a/lib/wasm-micro-runtime-WAMR-1.3.0/core/iwasm/interpreter/wasm_loader.c
+++ b/lib/wasm-micro-runtime-WAMR-1.3.0/core/iwasm/interpreter/wasm_loader.c
@@ -3980,14 +3980,22 @@ check_wasi_abi_compatibility(const WASMModule *module,
     /* clang-format on */
 
     WASMExport *initialize = NULL, *memory = NULL, *start = NULL;
+    uint32 import_function_count = module->import_function_count;
+    WASMType *func_type;
 
     /* (func (export "_start") (...) */
     start = wasm_loader_find_export(module, "", "_start", EXPORT_KIND_FUNC,
                                     error_buf, error_buf_size);
     if (start) {
-        WASMType *func_type =
-            module->functions[start->index - module->import_function_count]
-                ->func_type;
+        if (start->index < import_function_count) {
+            set_error_buf(
+                error_buf, error_buf_size,
+                "the builtin _start function can not be an import function");
+            return false;
+        }
+
+        func_type =
+            module->functions[start->index - import_function_count]->func_type;
         if (func_type->param_count || func_type->result_count) {
             set_error_buf(error_buf, error_buf_size,
                           "the signature of builtin _start function is wrong");
@@ -3999,8 +4007,15 @@ check_wasi_abi_compatibility(const WASMModule *module,
     initialize = wasm_loader_find_export(
         module, "", "_initialize", EXPORT_KIND_FUNC, error_buf, error_buf_size);
     if (initialize) {
-        WASMType *func_type =
-            module->functions[initialize->index - module->import_function_count]
+        if (initialize->index < import_function_count) {
+            set_error_buf(error_buf, error_buf_size,
+                          "the builtin _initialize function can not be an "
+                          "import function");
+            return false;
+        }
+
+        func_type =
+            module->functions[initialize->index - import_function_count]
                 ->func_type;
         if (func_type->param_count || func_type->result_count) {
             set_error_buf(
