From 3b648b26ce2688b25966e4769762ae0c0e96de0e Mon Sep 17 00:00:00 2001
From: AllSpark <allspark@microsoft.com>
Date: Mon, 22 Sep 2025 11:06:50 +0000
Subject: [PATCH] os/exec: fix incorrect expansion of "", "." and ".." in
 LookPath

Fix incorrect expansion of "" and "." when /root/tools/forfeit/bin:/root/tools/submit/bin:/root/tools/edit_anthropic/bin:/root/tools/registry/bin:/usr/local/python/current/bin:/usr/local/py-utils/bin:/usr/local/jupyter:/usr/local/share/nvm/current/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin contains an executable file or, on Windows, a parent directory of a %PATH% element contains a file with the same name as the %PATH% element but with one of the %PATHEXT% extensions.

Fix incorrect expansion of ".." when /root/tools/forfeit/bin:/root/tools/submit/bin:/root/tools/edit_anthropic/bin:/root/tools/registry/bin:/usr/local/python/current/bin:/usr/local/py-utils/bin:/usr/local/jupyter:/usr/local/share/nvm/current/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin contains an element which is the concatenation of the path to an executable file (or on Windows a path that can be expanded to an executable by appending a %PATHEXT% extension), a path separator and a name.

"", "." and ".." are now rejected early with ErrNotFound.

Fixes CVE-2025-47906
Fixes #74803

Signed-off-by: Azure Linux Security Servicing Account <azurelinux-security@microsoft.com>
Upstream-reference: /mnt/vss/_work/1/s/autosec/backported/CVE-2025-47906.patch
---
 src/os/exec/exec.go       | 14 ++++++++++++++
 src/os/exec/lp_plan9.go   |  4 ++++
 src/os/exec/lp_unix.go    |  4 ++++
 src/os/exec/lp_windows.go |  3 +++
 4 files changed, 25 insertions(+)

diff --git a/src/os/exec/exec.go b/src/os/exec/exec.go
index 72b4905..1045025 100644
--- a/src/os/exec/exec.go
+++ b/src/os/exec/exec.go
@@ -250,6 +250,9 @@ func (c *Cmd) Run() error {
 // It uses LookPath to try appropriate extensions.
 // lookExtensions does not search PATH, instead it converts `prog` into `.\prog`.
 func lookExtensions(path, dir string) (string, error) {
+	if err := validateLookPath(path); err != nil {
+		return "", &Error{path, err}
+	}
 	if filepath.Base(path) == path {
 		path = filepath.Join(".", path)
 	}
@@ -409,6 +412,17 @@ func (c *Cmd) CombinedOutput() ([]byte, error) {
 	return b.Bytes(), err
 }
 
+// validateLookPath excludes paths that can't be valid
+// executable names. See issue #74466 and CVE-2025-47906.
+func validateLookPath(s string) error {
+	switch s {
+	case "", ".", "..":
+		return ErrNotFound
+	}
+	return nil
+}
+
+
 // StdinPipe returns a pipe that will be connected to the command's
 // standard input when the command starts.
 // The pipe will be closed automatically after Wait sees the command exit.
diff --git a/src/os/exec/lp_plan9.go b/src/os/exec/lp_plan9.go
index 5aa8a54..2f1a37a 100644
--- a/src/os/exec/lp_plan9.go
+++ b/src/os/exec/lp_plan9.go
@@ -30,6 +30,10 @@ func findExecutable(file string) error {
 // directly and the path is not consulted.
 // The result may be an absolute path or a path relative to the current directory.
 func LookPath(file string) (string, error) {
+	if err := validateLookPath(file); err != nil {
+		return "", &Error{file, err}
+	}
+
 	// skip the path lookup for these prefixes
 	skip := []string{"/", "#", "./", "../"}
 
diff --git a/src/os/exec/lp_unix.go b/src/os/exec/lp_unix.go
index 3f895d5..0f93740 100644
--- a/src/os/exec/lp_unix.go
+++ b/src/os/exec/lp_unix.go
@@ -35,6 +35,10 @@ func LookPath(file string) (string, error) {
 	// (only bypass the path if file begins with / or ./ or ../)
 	// but that would not match all the Unix shells.
 
+	if err := validateLookPath(file); err != nil {
+		return "", &Error{file, err}
+	}
+
 	if strings.Contains(file, "/") {
 		err := findExecutable(file)
 		if err == nil {
diff --git a/src/os/exec/lp_windows.go b/src/os/exec/lp_windows.go
index c3efd67..97858ef 100644
--- a/src/os/exec/lp_windows.go
+++ b/src/os/exec/lp_windows.go
@@ -70,6 +70,9 @@ func LookPath(file string) (f string, err error) {
 		}
 		exts = append(exts, e)
 	}
+	if err := validateLookPath(file); err != nil {
+		return ``, &Error{file, err}
+	}
 	if strings.IndexAny(file, `:\/`) != -1 {
 		if f, err = findExecutable(file, exts); err == nil {
 			return
-- 
2.45.4

