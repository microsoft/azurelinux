From 4dbabcbb6bb82fc71ee411d6a8b81918d775a0b5 Mon Sep 17 00:00:00 2001
From: Alan Modra <amodra@gmail.com>
Date: Wed, 21 Dec 2022 21:40:12 +1030
Subject: [PATCH] PR29925, Memory leak in find_abstract_instance

The testcase in the PR had a variable with both DW_AT_decl_file and
DW_AT_specification, where the DW_AT_specification also specified
DW_AT_decl_file.  This leads to a memory leak as the file name is
malloced and duplicates are not expected.

I've also changed find_abstract_instance to not use a temp for "name",
because that can result in a change in behaviour from the usual last
of duplicate attributes wins.

	PR 29925
	* dwarf2.c (find_abstract_instance): Delete "name" variable.
	Free *filename_ptr before assigning new file name.
	(scan_unit_for_symbols): Similarly free func->file and
	var->file before assigning.

Modified patch <d28fbc7197ba0e021a43f873eff90b05dcdcff6a> to apply to AzureLinux: Added required free statements based on code.
Modified-by: Sandeep Karambelkar <skarambelkar@microsoft.com>
---
 bfd/dwarf2.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/bfd/dwarf2.c b/bfd/dwarf2.c
index 83ca8a3..414c2d2 100644
--- a/bfd/dwarf2.c
+++ b/bfd/dwarf2.c
@@ -2873,7 +2873,6 @@ find_abstract_instance (struct comp_unit *unit,
   struct abbrev_info *abbrev;
   bfd_uint64_t die_ref = attr_ptr->u.val;
   struct attribute attr;
-  const char *name = NULL;

   if (recur_count == 100)
     {
@@ -3038,16 +3037,16 @@ find_abstract_instance (struct comp_unit *unit,
 		case DW_AT_name:
 		  /* Prefer DW_AT_MIPS_linkage_name or DW_AT_linkage_name
 		     over DW_AT_name.  */
-		  if (name == NULL && is_str_attr (attr.form))
+		  if (*pname == NULL && is_str_attr (attr.form))
 		    {
-		      name = attr.u.str;
+		      *pname = attr.u.str;
 		      if (non_mangled (unit->lang))
 			*is_linkage = true;
 		    }
 		  break;
 		case DW_AT_specification:
 		  if (!find_abstract_instance (unit, &attr, recur_count + 1,
-					       &name, is_linkage,
+					       pname, is_linkage,
 					       filename_ptr, linenumber_ptr))
 		    return false;
 		  break;
@@ -3057,13 +3056,14 @@ find_abstract_instance (struct comp_unit *unit,
 		     non-string forms into these attributes.  */
 		  if (is_str_attr (attr.form))
 		    {
-		      name = attr.u.str;
+		      *pname = attr.u.str;
 		      *is_linkage = true;
 		    }
 		  break;
 		case DW_AT_decl_file:
 		  if (!comp_unit_maybe_decode_line_info (unit))
 		    return false;
+		  free (*filename_ptr);
 		  *filename_ptr = concat_filename (unit->line_table,
 						   attr.u.val);
 		  break;
@@ -3076,7 +3076,6 @@ find_abstract_instance (struct comp_unit *unit,
 	    }
 	}
     }
-  *pname = name;
   return true;
 }

@@ -3510,6 +3509,7 @@ scan_unit_for_symbols (struct comp_unit *unit)
 		  break;

 		case DW_AT_decl_file:
+		  free (func->file);
 		  func->file = concat_filename (unit->line_table,
 						attr.u.val);
 		  break;
@@ -3559,6 +3559,7 @@ scan_unit_for_symbols (struct comp_unit *unit)
 		  break;

 		case DW_AT_decl_file:
+		  free (var->file);
 		  var->file = concat_filename (unit->line_table,
 					       attr.u.val);
 		  break;
-- 
2.45.2

