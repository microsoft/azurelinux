From f30373d5ac9c1af048f352ce32eaddc7c83a9156 Mon Sep 17 00:00:00 2001
From: Sreenivasulu Malavathula <v-smalavathu@microsoft.com>
Date: Mon, 16 Jun 2025 16:28:52 -0500
Subject: [PATCH] Address CVE-2025-48938
Upstream Patch Reference: https://github.com/cli/go-gh/commit/a08820a.diff

---
 .../cli/go-gh/v2/pkg/browser/browser.go       | 59 +++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/vendor/github.com/cli/go-gh/v2/pkg/browser/browser.go b/vendor/github.com/cli/go-gh/v2/pkg/browser/browser.go
index 4d56710..d17951a 100644
--- a/vendor/github.com/cli/go-gh/v2/pkg/browser/browser.go
+++ b/vendor/github.com/cli/go-gh/v2/pkg/browser/browser.go
@@ -2,7 +2,9 @@
 package browser
 
 import (
+	"fmt"
 	"io"
+	"net/url"
 	"os"
 	"os/exec"
 
@@ -45,9 +47,20 @@ func (b *Browser) Browse(url string) error {
 }
 
 func (b *Browser) browse(url string, env []string) error {
+	// Ensure the URL is supported including the scheme,
+	// overwrite `url` for use within the function.
+	urlParsed, err := isPossibleProtocol(url)
+	if err != nil {
+		return err
+	}
+
+	url = urlParsed.String()
+
+	// Use default `gh` browsing module for opening URL if not customized.
 	if b.launcher == "" {
 		return cliBrowser.OpenURL(url)
 	}
+
 	launcherArgs, err := shlex.Split(b.launcher)
 	if err != nil {
 		return err
@@ -78,3 +91,49 @@ func resolveLauncher() string {
 	}
 	return os.Getenv("BROWSER")
 }
+
+func isSupportedScheme(scheme string) bool {
+	switch scheme {
+	case "http", "https", "vscode", "vscode-insiders":
+		return true
+	default:
+		return false
+	}
+}
+
+func isPossibleProtocol(u string) (*url.URL, error) {
+	// Parse URL for known supported schemes before handling unknown cases.
+	urlParsed, err := url.Parse(u)
+	if err != nil {
+		return nil, fmt.Errorf("opening unparsable URL is unsupported: %s", u)
+	}
+
+	if isSupportedScheme(urlParsed.Scheme) {
+		return urlParsed, nil
+	}
+
+	// Disallow any unrecognized URL schemes if explicitly present.
+	if urlParsed.Scheme != "" {
+		return nil, fmt.Errorf("opening unsupport URL scheme: %s", u)
+	}
+
+	// Disallow URLs that match existing files or directories on the filesystem
+	// as these could be executables or executed by the launcher browser due to
+	// the file extension and/or associated application.
+	//
+	// Symlinks should not be resolved in order to avoid broken links or other
+	// vulnerabilities trying to resolve them.
+	if fileInfo, _ := os.Lstat(u); fileInfo != nil {
+		return nil, fmt.Errorf("opening files or directories is unsupported: %s", u)
+	}
+
+	// Disallow URLs that match executables found in the user path.
+	exec, _ := safeexec.LookPath(u)
+	if exec != "" {
+		return nil, fmt.Errorf("opening executables is unsupported: %s", u)
+	}
+
+	// Otherwise, assume HTTP URL using `https` to ensure secure browsing.
+	urlParsed.Scheme = "https"
+	return urlParsed, nil
+}
-- 
2.45.2

