From 3a42fd8241c8fc43970ebaa6e0f56c4ea048a759 Mon Sep 17 00:00:00 2001
From: AllSpark <allspark@microsoft.com>
Date: Thu, 11 Sep 2025 16:04:42 +0000
Subject: [PATCH] CVE-2025-8277: Avoid leaking ecdh keys; free previously
 allocated pubkeys; fix memory leak on wrong KEX guess; adjust packet filter
 for DH-GEX. Backported manually.

Signed-off-by: Azure Linux Security Servicing Account <azurelinux-security@microsoft.com>
Upstream-reference: AI Backport of https://git.libssh.org/projects/libssh.git/patch/?id=1c763e29d138db87665e98983f468d2dd0f286c1 https://git.libssh.org/projects/libssh.git/patch/?id=8e4d67aa9eda455bfad9ac610e54b7a548d0aa08 https://git.libssh.org/projects/libssh.git/patch/?id=266174a6d36687b65cf90174f06af90b8b27c65f https://git.libssh.org/projects/libssh.git/patch/?id=87db2659ec608a977a63eea529f17b9168388d73
---
 src/dh_crypto.c       |  6 ++++++
 src/dh_key.c          |  6 ++++++
 src/ecdh_crypto.c     | 30 ++++++++++++++++++++++++++++++
 src/ecdh_gcrypt.c     |  7 +++++++
 src/ecdh_mbedcrypto.c | 10 ++++++++++
 src/packet.c          |  2 ++
 src/wrapper.c         |  3 +++
 7 files changed, 64 insertions(+)

diff --git a/src/dh_crypto.c b/src/dh_crypto.c
index 9ff7ad3..18897d8 100644
--- a/src/dh_crypto.c
+++ b/src/dh_crypto.c
@@ -404,6 +404,12 @@ done:
  */
 int ssh_dh_init_common(struct ssh_crypto_struct *crypto)
 {
+
+    /* Cleanup any previously allocated dh_ctx */
+    if (crypto->dh_ctx != NULL) {
+        ssh_dh_cleanup(crypto);
+    }
+
     struct dh_ctx *ctx;
     int rc;
 
diff --git a/src/dh_key.c b/src/dh_key.c
index 20d24a3..a22154a 100644
--- a/src/dh_key.c
+++ b/src/dh_key.c
@@ -235,6 +235,12 @@ done:
 int ssh_dh_init_common(struct ssh_crypto_struct *crypto)
 {
     struct dh_ctx *ctx = NULL;
+
+    /* Cleanup any previously allocated dh_ctx */
+    if (crypto->dh_ctx != NULL) {
+        ssh_dh_cleanup(crypto);
+    }
+
     int rc;
 
     ctx = calloc(1, sizeof(*ctx));
diff --git a/src/ecdh_crypto.c b/src/ecdh_crypto.c
index 069b137..6f9bbd7 100644
--- a/src/ecdh_crypto.c
+++ b/src/ecdh_crypto.c
@@ -219,11 +219,41 @@ int ssh_client_ecdh_init(ssh_session session){
       return SSH_ERROR;
   }
 
+  /* Free any previously allocated privkey */
+#if 1
+  if (session->next_crypto->ecdh_privkey != NULL) {
+      EC_KEY_free(session->next_crypto->ecdh_privkey);
+      session->next_crypto->ecdh_privkey = NULL;
+  }
+#else
+  if (session->next_crypto->ecdh_privkey != NULL) {
+      EVP_PKEY_free(session->next_crypto->ecdh_privkey);
+      session->next_crypto->ecdh_privkey = NULL;
+  }
+#endif /* OPENSSL_VERSION_NUMBER */
+
   session->next_crypto->ecdh_privkey = key;
+
+  /* Free previously allocated client pubkey, if any */
+  ssh_string_free(session->next_crypto->ecdh_client_pubkey);
   session->next_crypto->ecdh_client_pubkey = client_pubkey;
 
   /* register the packet callbacks */
   ssh_packet_set_callbacks(session, &ssh_ecdh_client_callbacks);
+
+  /* Free any previously allocated privkey */
+#if 1
+  if (session->next_crypto->ecdh_privkey != NULL) {
+      EC_KEY_free(session->next_crypto->ecdh_privkey);
+      session->next_crypto->ecdh_privkey = NULL;
+  }
+#else
+  if (session->next_crypto->ecdh_privkey != NULL) {
+      EVP_PKEY_free(session->next_crypto->ecdh_privkey);
+      session->next_crypto->ecdh_privkey = NULL;
+  }
+#endif /* OPENSSL_VERSION_NUMBER */
+
   session->dh_handshake_state = DH_STATE_INIT_SENT;
 
   rc = ssh_packet_send(session);
diff --git a/src/ecdh_gcrypt.c b/src/ecdh_gcrypt.c
index 3d9d426..8b55c1c 100644
--- a/src/ecdh_gcrypt.c
+++ b/src/ecdh_gcrypt.c
@@ -104,6 +104,13 @@ int ssh_client_ecdh_init(ssh_session session)
     session->next_crypto->ecdh_privkey = key;
     key = NULL;
     session->next_crypto->ecdh_client_pubkey = client_pubkey;
+
+    /* Free any previously allocated privkey */
+    if (session->next_crypto->ecdh_privkey != NULL) {
+        gcry_sexp_release(session->next_crypto->ecdh_privkey);
+        session->next_crypto->ecdh_privkey = NULL;
+    }
+
     client_pubkey = NULL;
 
     /* register the packet callbacks */
diff --git a/src/ecdh_mbedcrypto.c b/src/ecdh_mbedcrypto.c
index dda7392..b240279 100644
--- a/src/ecdh_mbedcrypto.c
+++ b/src/ecdh_mbedcrypto.c
@@ -70,6 +70,13 @@ int ssh_client_ecdh_init(ssh_session session)
         return SSH_ERROR;
     }
 
+    /* Free any previously allocated privkey */
+    if (session->next_crypto->ecdh_privkey != NULL) {
+        mbedtls_ecp_keypair_free(session->next_crypto->ecdh_privkey);
+        SAFE_FREE(session->next_crypto->ecdh_privkey);
+    }
+
+
     session->next_crypto->ecdh_privkey = malloc(sizeof(mbedtls_ecp_keypair));
     if (session->next_crypto->ecdh_privkey == NULL) {
         return SSH_ERROR;
@@ -104,6 +111,9 @@ int ssh_client_ecdh_init(ssh_session session)
         goto out;
     }
 
+
+    SSH_STRING_FREE(session->next_crypto->ecdh_client_pubkey);
+
     rc = ssh_buffer_add_ssh_string(session->out_buffer, client_pubkey);
     if (rc < 0) {
         rc = SSH_ERROR;
diff --git a/src/packet.c b/src/packet.c
index ea73f9a..dfb8b01 100644
--- a/src/packet.c
+++ b/src/packet.c
@@ -294,6 +294,7 @@ static enum ssh_packet_filter_result_e ssh_packet_incoming_filter(ssh_session se
          *   or session_state == SSH_SESSION_STATE_INITIAL_KEX
          * - dh_handshake_state == DH_STATE_INIT
          *   or dh_handshake_state == DH_STATE_INIT_SENT (re-exchange)
+         *   or dh_handshake_state == DH_STATE_REQUEST_SENT (dh-gex)
          *   or dh_handshake_state == DH_STATE_FINISHED (re-exchange)
          *
          * Transitions:
@@ -313,6 +314,7 @@ static enum ssh_packet_filter_result_e ssh_packet_incoming_filter(ssh_session se
 
         if ((session->dh_handshake_state != DH_STATE_INIT) &&
             (session->dh_handshake_state != DH_STATE_INIT_SENT) &&
+            (session->dh_handshake_state != DH_STATE_REQUEST_SENT) &&
             (session->dh_handshake_state != DH_STATE_FINISHED))
         {
             rc = SSH_PACKET_DENIED;
diff --git a/src/wrapper.c b/src/wrapper.c
index d317dc4..23643ea 100644
--- a/src/wrapper.c
+++ b/src/wrapper.c
@@ -190,6 +190,9 @@ void crypto_free(struct ssh_crypto_struct *crypto)
 #endif /* OPENSSL_VERSION_NUMBER */
 #elif defined HAVE_GCRYPT_ECC
         gcry_sexp_release(crypto->ecdh_privkey);
+#elif defined HAVE_LIBMBEDCRYPTO
+        mbedtls_ecp_keypair_free(crypto->ecdh_privkey);
+        SAFE_FREE(crypto->ecdh_privkey);
 #endif
         crypto->ecdh_privkey = NULL;
     }
-- 
2.45.4

