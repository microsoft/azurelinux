From 997c3bdf24749edbdb562af15f9d95be35f062de Mon Sep 17 00:00:00 2001
From: Tobias Brick <tobiasb@exchange.microsoft.com>
Date: Tue, 15 Oct 2024 16:21:27 +0000
Subject: [PATCH] Merged PR 11601893: add build flags to prevent stripping and
 post processing

## Description:
Add build flags to prevent stripping and post processing of binary after building. This is useful to fit in to different package build systems.

----
#### AI description  (iteration 1)
#### PR Classification
New feature

#### PR Summary
This pull request introduces build flags to control binary stripping and FIPS postprocessing.
- `CMakeLists.txt`: Added options `SYMCRYPT_STRIP_BINARY` and `SYMCRYPT_FIPS_POSTPROCESS` with default values set to `ON`.
- `scripts/build.py`: Added command-line arguments `--no-strip-binary` and `--no-fips-postprocess` to control the new build options.
- `BUILD.md`: Updated documentation to include the new build options.
- `modules/linux/common/ModuleCommon.cmake`: Modified conditions to respect the new build flags for stripping and FIPS postprocessing.
---
 BUILD.md                                |  2 ++
 CMakeLists.txt                          | 14 ++++++++++++++
 modules/linux/common/ModuleCommon.cmake |  4 ++--
 scripts/build.py                        |  8 ++++++++
 4 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/BUILD.md b/BUILD.md
index f6c781d..e8eaa88 100644
--- a/BUILD.md
+++ b/BUILD.md
@@ -74,6 +74,8 @@ and building the Linux modules with FIPS integrity checks.
       * To cross-compile for Linux ARM64, you must also use `--toolchain=cmake-configs/Toolchain-Clang-ARM64.cmake`
     * `-DSYMCRYPT_USE_ASM=<ON|OFF>` to choose whether to use assembly optimizations. Defaults to `ON`.
     * `-DSYMCRYPT_FIPS_BUILD=<ON|OFF>` to choose whether to enable FIPS self-tests in the SymCrypt shared object module. Defaults to `ON`. Currently only affects Linux builds.
+    * `-DSYMCRYPT_STRIP_BINARY=<ON|OFF>` to choose whether to strip the binary. Defaults to `ON`.
+    * `-DSYMCRYPT_FIPS_POSTPROCESS=<ON|OFF>` to choose whether to run the FIPS postprocess script. Defaults to `ON`.
     * For a release build, specify `-DCMAKE_BUILD_TYPE=RelWithDebInfo`
 1. `cmake --build bin`
     * Optionally, for a release build on Windows, specify `--config Release`
diff --git a/CMakeLists.txt b/CMakeLists.txt
index cd9aa15..9e0c599 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -56,6 +56,18 @@ if(SYMCRYPT_FIPS_BUILD)
     add_compile_definitions(SYMCRYPT_DO_FIPS_SELFTESTS=1)
 endif()
 
+option(
+    SYMCRYPT_STRIP_BINARY
+    "When enabled, SymCrypt will strip the binary in release mode."
+    ON
+)
+
+option(
+    SYMCRYPT_FIPS_POSTPROCESS
+    "When enabled, SymCrypt will do postprocessing the binary for FIPS integrity verification."
+    ON
+)
+
 option(
     SYMCRYPT_TEST_LEGACY_IMPL
     "When enabled, the SymCrypt unit tests will be linked against and configured to run compatibility and performance tests on the legacy
@@ -104,6 +116,8 @@ message(STATUS "Host: ${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_PROCESSOR}")
 message(STATUS "Target: ${CMAKE_SYSTEM_NAME} ${SYMCRYPT_TARGET_ARCH} ${SYMCRYPT_TARGET_ENV}")
 message(STATUS "ASM optimizations: ${SYMCRYPT_USE_ASM}")
 message(STATUS "FIPS build: ${SYMCRYPT_FIPS_BUILD}")
+message(STATUS "Strip binary: ${SYMCRYPT_STRIP_BINARY}")
+message(STATUS "FIPS postprocess: ${SYMCRYPT_FIPS_POSTPROCESS}")
 
 # Validate compiler versions
 if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
diff --git a/modules/linux/common/ModuleCommon.cmake b/modules/linux/common/ModuleCommon.cmake
index e6db214..fbe1421 100644
--- a/modules/linux/common/ModuleCommon.cmake
+++ b/modules/linux/common/ModuleCommon.cmake
@@ -61,7 +61,7 @@ set_target_properties(${TARGET_NAME} PROPERTIES VERSION ${PROJECT_VERSION})
 set_target_properties(${TARGET_NAME} PROPERTIES SOVERSION ${PROJECT_VERSION_MAJOR})
 
 
-if(CMAKE_BUILD_TYPE MATCHES "Release|RelWithDebInfo")
+if(CMAKE_BUILD_TYPE MATCHES "Release|RelWithDebInfo" AND SYMCRYPT_STRIP_BINARY)
     add_custom_command(
         TARGET ${TARGET_NAME}
         POST_BUILD
@@ -73,7 +73,7 @@ if(CMAKE_BUILD_TYPE MATCHES "Release|RelWithDebInfo")
     )
 endif()
 
-if(SYMCRYPT_FIPS_BUILD)
+if(SYMCRYPT_FIPS_BUILD AND SYMCRYPT_FIPS_POSTPROCESS)
     add_custom_command(
         TARGET ${TARGET_NAME}
         POST_BUILD
diff --git a/scripts/build.py b/scripts/build.py
index af9b0bc..3a70b84 100755
--- a/scripts/build.py
+++ b/scripts/build.py
@@ -101,6 +101,12 @@ def configure_cmake(args : argparse.Namespace) -> None:
     if not args.fips:
         cmake_args.append("-DSYMCRYPT_FIPS_BUILD=OFF")
 
+    if not args.strip_binary:
+        cmake_args.append("-DSYMCRYPT_STRIP_BINARY=OFF")
+
+    if not args.fips_postprocess:
+        cmake_args.append("-DSYMCRYPT_FIPS_POSTPROCESS=OFF")
+
     if args.test_legacy_impl:
         cmake_args.append("-DSYMCRYPT_TEST_LEGACY_IMPL=ON")
 
@@ -218,6 +224,8 @@ def main() -> None:
     parser_cmake.add_argument("--cxx", type = str, help = "Specify the C++ compiler to use. If not provided, uses platform default.")
     parser_cmake.add_argument("--no-asm", action = "store_false", dest = "asm", help = "Disable handwritten ASM optimizations.", default = True)
     parser_cmake.add_argument("--no-fips", action = "store_false", dest = "fips", help = "Disable FIPS selftests and postprocessing of binary. Currently only affects Linux targets.", default = True)
+    parser_cmake.add_argument("--no-strip-binary", action = "store_false", dest = "strip_binary", help = "Disable stripping of binary.", default = True)
+    parser_cmake.add_argument("--no-fips-postprocess", action = "store_false", dest = "fips_postprocess", help = "Disable FIPS postprocessing of binary.", default = True)
     parser_cmake.add_argument("--test-legacy-impl", action = "store_true",
         help = "Build unit tests with support for legacy Windows cryptographic implementations. Requires access to private static libraries.",
         default = False)
-- 
2.39.4

