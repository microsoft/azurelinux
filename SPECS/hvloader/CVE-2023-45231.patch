Link: https://github.com/tianocore/user-attachments/raw/refs/heads/main/tianocore/edk2/BZ-1454-TCBZ4534_to_TCBZ4540.patch

From d74c1be05f439ab3b94ac50f8b46cece775c8ee7 Mon Sep 17 00:00:00 2001
From: Doug Flick <dougflick@microsoft.com>
Date: Fri, 15 Dec 2023 13:32:28 -0800
Subject: [PATCH 05/12] SECURITY PATCH TCBZ4536 - CVE-2023-45231 - Patch

---
 NetworkPkg/Ip6Dxe/Ip6Option.c | 112 ++++++++++++++++++----------------
 1 file changed, 60 insertions(+), 52 deletions(-)

diff --git a/NetworkPkg/Ip6Dxe/Ip6Option.c b/NetworkPkg/Ip6Dxe/Ip6Option.c
index 199eea124d..bc74d52a6c 100644
--- a/NetworkPkg/Ip6Dxe/Ip6Option.c
+++ b/NetworkPkg/Ip6Dxe/Ip6Option.c
@@ -76,27 +76,27 @@ Ip6IsOptionValid (
           case Ip6OptionParameterProblem:
             Pointer = Pointer + Offset + sizeof (EFI_IP6_HEADER);
             Ip6SendIcmpError (
-              IpSb,
-              Packet,
-              NULL,
-              &Packet->Ip.Ip6->SourceAddress,
-              ICMP_V6_PARAMETER_PROBLEM,
-              2,
-              &Pointer
-              );
+                              IpSb,
+                              Packet,
+                              NULL,
+                              &Packet->Ip.Ip6->SourceAddress,
+                              ICMP_V6_PARAMETER_PROBLEM,
+                              2,
+                              &Pointer
+                              );
             return FALSE;
           case Ip6OptionMask:
             if (!IP6_IS_MULTICAST (&Packet->Ip.Ip6->DestinationAddress)) {
               Pointer = Pointer + Offset + sizeof (EFI_IP6_HEADER);
               Ip6SendIcmpError (
-                IpSb,
-                Packet,
-                NULL,
-                &Packet->Ip.Ip6->SourceAddress,
-                ICMP_V6_PARAMETER_PROBLEM,
-                2,
-                &Pointer
-                );
+                                IpSb,
+                                Packet,
+                                NULL,
+                                &Packet->Ip.Ip6->SourceAddress,
+                                ICMP_V6_PARAMETER_PROBLEM,
+                                2,
+                                &Pointer
+                                );
             }
 
             return FALSE;
@@ -137,6 +137,14 @@ Ip6IsNDOptionValid (
     return FALSE;
   }
 
+  //
+  // Cannot process truncated options.
+  // Cannot process options with a length of 0 as there is no Type field.
+  //
+  if (OptionLen < sizeof (IP6_OPTION_HEADER)) {
+    return FALSE;
+  }
+
   Offset = 0;
 
   //
@@ -358,14 +366,14 @@ Ip6IsExtsValid (
               !IP6_IS_MULTICAST (&Packet->Ip.Ip6->DestinationAddress))
           {
             Ip6SendIcmpError (
-              IpSb,
-              Packet,
-              NULL,
-              &Packet->Ip.Ip6->SourceAddress,
-              ICMP_V6_PARAMETER_PROBLEM,
-              1,
-              &Pointer
-              );
+                              IpSb,
+                              Packet,
+                              NULL,
+                              &Packet->Ip.Ip6->SourceAddress,
+                              ICMP_V6_PARAMETER_PROBLEM,
+                              1,
+                              &Pointer
+                              );
           }
 
           return FALSE;
@@ -438,14 +446,14 @@ Ip6IsExtsValid (
               !IP6_IS_MULTICAST (&Packet->Ip.Ip6->DestinationAddress))
           {
             Ip6SendIcmpError (
-              IpSb,
-              Packet,
-              NULL,
-              &Packet->Ip.Ip6->SourceAddress,
-              ICMP_V6_PARAMETER_PROBLEM,
-              0,
-              &Pointer
-              );
+                              IpSb,
+                              Packet,
+                              NULL,
+                              &Packet->Ip.Ip6->SourceAddress,
+                              ICMP_V6_PARAMETER_PROBLEM,
+                              0,
+                              &Pointer
+                              );
           }
 
           return FALSE;
@@ -484,14 +492,14 @@ Ip6IsExtsValid (
           {
             Pointer = sizeof (UINT32);
             Ip6SendIcmpError (
-              IpSb,
-              Packet,
-              NULL,
-              &Packet->Ip.Ip6->SourceAddress,
-              ICMP_V6_PARAMETER_PROBLEM,
-              0,
-              &Pointer
-              );
+                              IpSb,
+                              Packet,
+                              NULL,
+                              &Packet->Ip.Ip6->SourceAddress,
+                              ICMP_V6_PARAMETER_PROBLEM,
+                              0,
+                              &Pointer
+                              );
             return FALSE;
           }
         }
@@ -560,14 +568,14 @@ Ip6IsExtsValid (
             !IP6_IS_MULTICAST (&Packet->Ip.Ip6->DestinationAddress))
         {
           Ip6SendIcmpError (
-            IpSb,
-            Packet,
-            NULL,
-            &Packet->Ip.Ip6->SourceAddress,
-            ICMP_V6_PARAMETER_PROBLEM,
-            1,
-            &Pointer
-            );
+                            IpSb,
+                            Packet,
+                            NULL,
+                            &Packet->Ip.Ip6->SourceAddress,
+                            ICMP_V6_PARAMETER_PROBLEM,
+                            1,
+                            &Pointer
+                            );
         }
 
         return FALSE;
@@ -774,10 +782,10 @@ Ip6FillFragmentHeader (
     // Append the part2 (fragmentable part) of Extension headers
     //
     CopyMem (
-      Buffer + Part1Len + sizeof (IP6_FRAGMENT_HEADER),
-      ExtHdrs + Part1Len,
-      ExtHdrsLen - Part1Len
-      );
+             Buffer + Part1Len + sizeof (IP6_FRAGMENT_HEADER),
+             ExtHdrs + Part1Len,
+             ExtHdrsLen - Part1Len
+             );
   }
 
   *UpdatedExtHdrs = Buffer;

From 2f237a59ec4ea3df4b1614566ac29c90fb106669 Mon Sep 17 00:00:00 2001
From: Doug Flick <dougflick@microsoft.com>
Date: Fri, 15 Dec 2023 13:55:30 -0800
Subject: [PATCH 06/12] SECURITY PATCH TCBZ4536 - CVE-2023-45231 - Host Based
 Unit Test

---
 .../Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.cpp    |  27 ++++
 .../Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.inf    |  42 ++++++
 .../Ip6Dxe/GoogleTest/Ip6OptionGoogleTest.cpp | 129 ++++++++++++++++++
 NetworkPkg/Test/NetworkPkgHostTest.dsc        |   1 +
 4 files changed, 199 insertions(+)
 create mode 100644 NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.cpp
 create mode 100644 NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.inf
 create mode 100644 NetworkPkg/Ip6Dxe/GoogleTest/Ip6OptionGoogleTest.cpp

diff --git a/NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.cpp b/NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.cpp
new file mode 100644
index 0000000000..9dd5577249
--- /dev/null
+++ b/NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.cpp
@@ -0,0 +1,27 @@
+/** @file
+  Acts as the main entry point for the tests for the Ip6Dxe module.
+
+  Copyright (c) Microsoft Corporation
+  SPDX-License-Identifier: BSD-2-Clause-Patent
+**/
+#include <gtest/gtest.h>
+
+////////////////////////////////////////////////////////////////////////////////
+// Add test files here
+// Google Test will only pick up the tests from the files that are included
+// here.
+////////////////////////////////////////////////////////////////////////////////
+#include "Ip6OptionGoogleTest.cpp"
+
+////////////////////////////////////////////////////////////////////////////////
+// Run the tests
+////////////////////////////////////////////////////////////////////////////////
+int
+main (
+  int   argc,
+  char  *argv[]
+  )
+{
+  testing::InitGoogleTest (&argc, argv);
+  return RUN_ALL_TESTS ();
+}
diff --git a/NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.inf b/NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.inf
new file mode 100644
index 0000000000..b85584b796
--- /dev/null
+++ b/NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.inf
@@ -0,0 +1,42 @@
+## @file
+# Unit test suite for the Ip6Dxe using Google Test
+#
+# Copyright (c) Microsoft Corporation.<BR>
+# SPDX-License-Identifier: BSD-2-Clause-Patent
+##
+[Defines]
+  INF_VERSION         = 0x00010017
+  BASE_NAME           = Ip6DxeUnitTest
+  FILE_GUID           = 4F05D17D-D3E7-4AAE-820C-576D46D2D34A
+  VERSION_STRING      = 1.0
+  MODULE_TYPE         = HOST_APPLICATION
+#
+# The following information is for reference only and not required by the build tools.
+#
+#  VALID_ARCHITECTURES           = IA32 X64 AARCH64
+#
+[Sources]
+  Ip6DxeGoogleTest.cpp
+  Ip6OptionGoogleTest.cpp
+  ../Ip6Option.c
+
+[Packages]
+  MdePkg/MdePkg.dec
+  MdeModulePkg/MdeModulePkg.dec
+  UnitTestFrameworkPkg/UnitTestFrameworkPkg.dec
+  NetworkPkg/NetworkPkg.dec
+
+[LibraryClasses]
+  GoogleTestLib
+  DebugLib
+  NetLib
+  PcdLib
+
+[Protocols]
+  gEfiDhcp6ServiceBindingProtocolGuid
+
+[Pcd]
+  gEfiNetworkPkgTokenSpaceGuid.PcdDhcp6UidType
+
+[Guids]
+  gZeroGuid  
\ No newline at end of file
diff --git a/NetworkPkg/Ip6Dxe/GoogleTest/Ip6OptionGoogleTest.cpp b/NetworkPkg/Ip6Dxe/GoogleTest/Ip6OptionGoogleTest.cpp
new file mode 100644
index 0000000000..c4bcfacb92
--- /dev/null
+++ b/NetworkPkg/Ip6Dxe/GoogleTest/Ip6OptionGoogleTest.cpp
@@ -0,0 +1,129 @@
+/** @file
+  Tests for Ip6Option.c.
+
+  Copyright (c) Microsoft Corporation
+  SPDX-License-Identifier: BSD-2-Clause-Patent
+**/
+#include <gtest/gtest.h>
+
+extern "C" {
+  #include <Uefi.h>
+  #include <Library/BaseLib.h>
+  #include <Library/DebugLib.h>
+  #include "../Ip6Impl.h"
+  #include "../Ip6Option.h"
+}
+
+/////////////////////////////////////////////////////////////////////////
+// Defines
+///////////////////////////////////////////////////////////////////////
+
+#define IP6_PREFIX_INFO_OPTION_DATA_LEN    32
+#define OPTION_HEADER_IP6_PREFIX_DATA_LEN  (sizeof (IP6_OPTION_HEADER) + IP6_PREFIX_INFO_OPTION_DATA_LEN)
+
+////////////////////////////////////////////////////////////////////////
+// Symbol Definitions
+// These functions are not directly under test - but required to compile
+////////////////////////////////////////////////////////////////////////
+UINT32  mIp6Id;
+
+EFI_STATUS
+Ip6SendIcmpError (
+  IN IP6_SERVICE       *IpSb,
+  IN NET_BUF           *Packet,
+  IN EFI_IPv6_ADDRESS  *SourceAddress       OPTIONAL,
+  IN EFI_IPv6_ADDRESS  *DestinationAddress,
+  IN UINT8             Type,
+  IN UINT8             Code,
+  IN UINT32            *Pointer             OPTIONAL
+  )
+{
+  // ..
+  return EFI_SUCCESS;
+}
+
+////////////////////////////////////////////////////////////////////////
+// Ip6OptionValidation Tests
+////////////////////////////////////////////////////////////////////////
+
+// Define a fixture for your tests if needed
+class Ip6OptionValidationTest : public ::testing::Test {
+protected:
+  // Add any setup code if needed
+  virtual void
+  SetUp (
+    )
+  {
+    // Initialize any resources or variables
+  }
+
+  // Add any cleanup code if needed
+  virtual void
+  TearDown (
+    )
+  {
+    // Clean up any resources or variables
+  }
+};
+
+// Test Description:
+// Null option should return false
+TEST_F (Ip6OptionValidationTest, NullOptionShouldReturnFalse) {
+  UINT8   *option   = nullptr;
+  UINT16  optionLen = 10; // Provide a suitable length
+
+  EXPECT_FALSE (Ip6IsNDOptionValid (option, optionLen));
+}
+
+// Test Description:
+// Truncated option should return false
+TEST_F (Ip6OptionValidationTest, TruncatedOptionShouldReturnFalse) {
+  UINT8   option[]  = { 0x01 }; // Provide a truncated option
+  UINT16  optionLen = 1;
+
+  EXPECT_FALSE (Ip6IsNDOptionValid (option, optionLen));
+}
+
+// Test Description:
+// Ip6OptionPrefixInfo Option with zero length should return false
+TEST_F (Ip6OptionValidationTest, OptionWithZeroLengthShouldReturnFalse) {
+  IP6_OPTION_HEADER  optionHeader;
+
+  optionHeader.Type   = Ip6OptionPrefixInfo;
+  optionHeader.Length = 0;
+  UINT8  option[sizeof (IP6_OPTION_HEADER)];
+
+  CopyMem (option, &optionHeader, sizeof (IP6_OPTION_HEADER));
+  UINT16  optionLen = sizeof (IP6_OPTION_HEADER);
+
+  EXPECT_FALSE (Ip6IsNDOptionValid (option, optionLen));
+}
+
+// Test Description:
+// Ip6OptionPrefixInfo Option with valid length should return true
+TEST_F (Ip6OptionValidationTest, ValidPrefixInfoOptionShouldReturnTrue) {
+  IP6_OPTION_HEADER  optionHeader;
+
+  optionHeader.Type   = Ip6OptionPrefixInfo;
+  optionHeader.Length = 4; // Length 4 * 8 = 32
+  UINT8  option[OPTION_HEADER_IP6_PREFIX_DATA_LEN];
+
+  CopyMem (option, &optionHeader, OPTION_HEADER_IP6_PREFIX_DATA_LEN);
+
+  EXPECT_FALSE (Ip6IsNDOptionValid (option, OPTION_HEADER_IP6_PREFIX_DATA_LEN));
+}
+
+// Test Description:
+// Ip6OptionPrefixInfo Option with invalid length should return false
+TEST_F (Ip6OptionValidationTest, InvalidPrefixInfoOptionLengthShouldReturnFalse) {
+  IP6_OPTION_HEADER  optionHeader;
+
+  optionHeader.Type   = Ip6OptionPrefixInfo;
+  optionHeader.Length = 3; // Length 3 * 8 = 24 (Invalid)
+  UINT8  option[sizeof (IP6_OPTION_HEADER)];
+
+  CopyMem (option, &optionHeader, sizeof (IP6_OPTION_HEADER));
+  UINT16  optionLen = sizeof (IP6_OPTION_HEADER);
+
+  EXPECT_FALSE (Ip6IsNDOptionValid (option, optionLen));
+}
\ No newline at end of file
diff --git a/NetworkPkg/Test/NetworkPkgHostTest.dsc b/NetworkPkg/Test/NetworkPkgHostTest.dsc
index f6459b124f..8ed3585c06 100644
--- a/NetworkPkg/Test/NetworkPkgHostTest.dsc
+++ b/NetworkPkg/Test/NetworkPkgHostTest.dsc
@@ -25,6 +25,7 @@
   # Build HOST_APPLICATION that tests NetworkPkg
   #
   NetworkPkg/Dhcp6Dxe/GoogleTest/Dhcp6DxeGoogleTest.inf
+  NetworkPkg/Ip6Dxe/GoogleTest/Ip6DxeGoogleTest.inf
 
 # Despite these library classes being listed in [LibraryClasses] below, they are not needed for the host-based unit tests.
 [LibraryClasses]

