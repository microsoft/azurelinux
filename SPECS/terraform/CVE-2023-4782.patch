From 0f2314fb62193c4be94328cc026fcb7ec1e9b893 Mon Sep 17 00:00:00 2001
From: CJ Horton <17039873+radditude@users.noreply.github.com>
Date: Wed, 30 Aug 2023 09:37:06 -0700
Subject: [PATCH] initwd: require valid module name (#33745)

We install remote modules prior to showing any validation errors during init
so that we can show errors about the core version requirement before we do
anything else. Unfortunately, this means that we don't validate module names
until after remote modules have been installed, which may cause unexpected
problems if we can't convert the module name into a valid path.
---
 internal/initwd/module_install.go             |  7 +++++++
 internal/initwd/module_install_test.go        | 18 +++++++++++++++++++
 .../invalid-module-name/child/main.tf         |  3 +++
 .../testdata/invalid-module-name/main.tf      |  3 +++
 4 files changed, 31 insertions(+)
 create mode 100644 internal/initwd/testdata/invalid-module-name/child/main.tf
 create mode 100644 internal/initwd/testdata/invalid-module-name/main.tf

diff --git a/internal/initwd/module_install.go b/internal/initwd/module_install.go
index adc5dec..779deb9 100644
--- a/internal/initwd/module_install.go
+++ b/internal/initwd/module_install.go
@@ -11,6 +11,7 @@ import (
 	"strings"
 
 	version "github.com/hashicorp/go-version"
+	"github.com/hashicorp/hcl/v2/hclsyntax"
 	"github.com/hashicorp/terraform-config-inspect/tfconfig"
 	"github.com/hashicorp/terraform/internal/addrs"
 	"github.com/hashicorp/terraform/internal/earlyconfig"
@@ -119,6 +120,12 @@ func (i *ModuleInstaller) installDescendentModules(ctx context.Context, rootMod
 
 	cfg, cDiags := earlyconfig.BuildConfig(rootMod, earlyconfig.ModuleWalkerFunc(
 		func(req *earlyconfig.ModuleRequest) (*tfconfig.Module, *version.Version, tfdiags.Diagnostics) {
+			if !hclsyntax.ValidIdentifier(req.Name) {
+				// A module with an invalid name shouldn't be installed at all. This is
+				// mostly a concern for remote modules, since we need to be able to convert
+				// the name to a valid path.
+				return nil, nil, diags
+			}
 
 			key := manifest.ModuleKey(req.Path)
 			instPath := i.packageInstallPath(req.Path)
diff --git a/internal/initwd/module_install_test.go b/internal/initwd/module_install_test.go
index b05c561..4edb323 100644
--- a/internal/initwd/module_install_test.go
+++ b/internal/initwd/module_install_test.go
@@ -110,6 +110,24 @@ func TestModuleInstaller_error(t *testing.T) {
 	}
 }
 
+func TestModuleInstaller_invalidModuleName(t *testing.T) {
+	fixtureDir := filepath.Clean("testdata/invalid-module-name")
+	dir, done := tempChdir(t, fixtureDir)
+	defer done()
+
+	hooks := &testInstallHooks{}
+
+	modulesDir := filepath.Join(dir, ".terraform/modules")
+	inst := NewModuleInstaller(modulesDir, nil)
+	_, diags := inst.InstallModules(context.Background(), dir, false, hooks)
+
+	if !diags.HasErrors() {
+		t.Fatal("expected error")
+	} else {
+		assertDiagnosticSummary(t, diags, "Invalid module instance name")
+	}
+}
+
 func TestModuleInstaller_packageEscapeError(t *testing.T) {
 	fixtureDir := filepath.Clean("testdata/load-module-package-escape")
 	dir, done := tempChdir(t, fixtureDir)
diff --git a/internal/initwd/testdata/invalid-module-name/child/main.tf b/internal/initwd/testdata/invalid-module-name/child/main.tf
new file mode 100644
index 000000000000..6187fa659d2c
--- /dev/null
+++ b/internal/initwd/testdata/invalid-module-name/child/main.tf
@@ -0,0 +1,3 @@
+output "boop" {
+  value = "beep"
+}
diff --git a/internal/initwd/testdata/invalid-module-name/main.tf b/internal/initwd/testdata/invalid-module-name/main.tf
new file mode 100644
index 000000000000..316afe474c5c
--- /dev/null
+++ b/internal/initwd/testdata/invalid-module-name/main.tf
@@ -0,0 +1,3 @@
+module "../invalid" {
+  source  = "./child"
+}
