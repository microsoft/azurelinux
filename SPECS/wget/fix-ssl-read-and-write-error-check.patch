From 8877050c3f00a19d43e539029d2346d1040d8c02 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim=20R=C3=BChsen?= <tim.ruehsen@gmx.de>
Date: Sun, 22 Sep 2024 12:12:42 +0200
Subject: [PATCH] Count 0 as an error for SSL_read and SSL_write, per
 documentation

* libwget/ssl_openssl.c (ssl_transfer): Take 0 as error,
  slightly refactor code.

Fixes https://github.com/rockdaboot/wget2/issues/342

Reported-by: Tobias Brick (he/him) <tobiasb@microsoft.com>
Co-authored-by: Tobias Brick (he/him) <tobiasb@microsoft.com>
---
 libwget/ssl_openssl.c | 34 +++++++++++++++++++---------------
 1 file changed, 19 insertions(+), 15 deletions(-)

diff --git a/libwget/ssl_openssl.c b/libwget/ssl_openssl.c
index 7a52792d..885b0c2c 100644
--- a/libwget/ssl_openssl.c
+++ b/libwget/ssl_openssl.c
@@ -1789,7 +1789,7 @@ static int ssl_transfer(int want,
 		void *buf, int count)
 {
 	SSL *ssl;
-	int fd, retval, error, ops = want;
+	int fd;
 
 	if (count == 0)
 		return 0;
@@ -1801,7 +1801,9 @@ static int ssl_transfer(int want,
 	if (timeout < -1)
 		timeout = -1;
 
-	do {
+	for (int ops = want;;) {
+		int retval;
+
 		if (timeout) {
 			/* Wait until file descriptor becomes ready */
 			retval = wget_ready_2_transfer(fd, timeout, ops);
@@ -1817,23 +1819,25 @@ static int ssl_transfer(int want,
 		else
 			retval = SSL_write(ssl, buf, count);
 
-		if (retval < 0) {
-			error = SSL_get_error(ssl, retval);
+		if (retval > 0)
+			return retval;
 
-			if (error == SSL_ERROR_WANT_READ || error == SSL_ERROR_WANT_WRITE) {
-				/* Socket not ready - let's try again (unless timeout was zero) */
-				ops = WGET_IO_WRITABLE | WGET_IO_READABLE;
+		// The OpenSSL docs consider <= 0 an error.
+		int error = SSL_get_error(ssl, retval);
+		if (error == SSL_ERROR_WANT_READ || error == SSL_ERROR_WANT_WRITE) {
+			/* Socket not ready - let's try again (unless timeout was zero) */
+			ops = WGET_IO_WRITABLE | WGET_IO_READABLE;
 
-				if (timeout == 0)
-					return 0;
-			} else {
-				/* Not exactly a handshake error, but this is the closest one to signal TLS layer errors */
-				return WGET_E_HANDSHAKE;
-			}
+			if (timeout == 0)
+				return 0;
+		} else {
+			/* Not exactly a handshake error, but this is the closest one to signal TLS layer errors */
+			return WGET_E_HANDSHAKE;
 		}
-	} while (retval < 0);
+	}
 
-	return retval;
+	// The execution can never get here.
+	return WGET_E_UNKNOWN;
 }
 
 /**
