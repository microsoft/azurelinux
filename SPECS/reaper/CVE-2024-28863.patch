From d5c11013abfd08ccbdf829de8070e0ed275d0c61 Mon Sep 17 00:00:00 2001
From: Kevin Lockwood <v-klockwood@microsoft.com>
Date: Fri, 14 Mar 2025 14:01:06 -0700
Subject: [PATCH] [Medium] patch reaper for CVE-2024-28863

Link: https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7.patch
---
 npm/node_modules/tar/lib/unpack.js | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/npm/node_modules/tar/lib/unpack.js b/npm/node_modules/tar/lib/unpack.js
index 726c457..7225361 100644
--- a/npm/node_modules/tar/lib/unpack.js
+++ b/npm/node_modules/tar/lib/unpack.js
@@ -174,6 +174,12 @@ class Unpack extends Parser {
     this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?
       process.getgid() : null
 
+    // prevent excessively deep nesting of subfolders
+    // set to `Infinity` to remove this restriction
+    this.maxDepth = typeof opt.maxDepth === 'number'
+      ? opt.maxDepth
+      : DEFAULT_MAX_DEPTH
+
     // mostly just for testing, but useful in some cases.
     // Forcibly trigger a chown on every entry, no matter what
     this.forceChown = opt.forceChown === true
@@ -219,11 +225,12 @@ class Unpack extends Parser {
   }
 
   [CHECKPATH] (entry) {
+    const p = normPath(entry.path)
+    const parts = p.split('/')
+
     if (this.strip) {
-      const parts = normPath(entry.path).split('/')
       if (parts.length < this.strip)
         return false
-      entry.path = parts.slice(this.strip).join('/')
 
       if (entry.type === 'Link') {
         const linkparts = normPath(entry.linkpath).split('/')
@@ -232,11 +239,21 @@ class Unpack extends Parser {
         else
           return false
       }
+      parts.splice(0, this.strip)
+      entry.path = parts.join('/')
+    }
+
+    if (isFinite(this.maxDepth) && parts.length > this.maxDepth) {
+      this.warn('TAR_ENTRY_ERROR', 'path excessively deep', {
+        entry,
+        path: p,
+        depth: parts.length,
+        maxDepth: this.maxDepth,
+      })
+      return false
     }
 
     if (!this.preservePaths) {
-      const p = normPath(entry.path)
-      const parts = p.split('/')
       if (parts.includes('..') || isWindows && /^[a-z]:\.\.$/i.test(parts[0])) {
         this.warn(`path contains '..'`, p)
         return false
-- 
2.34.1

