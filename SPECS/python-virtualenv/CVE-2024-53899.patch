From 1a819d5cb9440ef6e1385c1059742e394118f3d6 Mon Sep 17 00:00:00 2001
From: Kanishk-Bansal <kbkanishk975@gmail.com>
Date: Tue, 28 Jan 2025 17:01:56 +0000
Subject: [PATCH] Address CVE-2024-53899

---
 src/virtualenv/activation/batch/__init__.py   |  4 +++
 src/virtualenv/activation/nushell/__init__.py | 18 +++++++++++++
 .../activation/powershell/__init__.py         | 25 +++++++++++++++----
 src/virtualenv/activation/python/__init__.py  |  7 +++++-
 .../activation/python/activate_this.py        |  7 +++---
 src/virtualenv/activation/via_template.py     | 14 +++++++++--
 6 files changed, 64 insertions(+), 11 deletions(-)

diff --git a/src/virtualenv/activation/batch/__init__.py b/src/virtualenv/activation/batch/__init__.py
index 4149712..e10f052 100644
--- a/src/virtualenv/activation/batch/__init__.py
+++ b/src/virtualenv/activation/batch/__init__.py
@@ -16,6 +16,10 @@ class BatchActivator(ViaTemplateActivator):
         yield Path("activate.bat")
         yield Path("deactivate.bat")
         yield Path("pydoc.bat")
+        
+    @staticmethod
+    def quote(string):
+        return string
 
     def instantiate_template(self, replacements, template, creator):
         # ensure the text has all newlines as \r\n - required by batch
diff --git a/src/virtualenv/activation/nushell/__init__.py b/src/virtualenv/activation/nushell/__init__.py
index 994c1fb..4ee1406 100644
--- a/src/virtualenv/activation/nushell/__init__.py
+++ b/src/virtualenv/activation/nushell/__init__.py
@@ -13,6 +13,24 @@ class NushellActivator(ViaTemplateActivator):
         yield Path("activate.nu")
         yield Path("deactivate.nu")
 
+    @staticmethod
+    def quote(string):
+        """
+        Nushell supports raw strings like: r###'this is a string'###.
+        This method finds the maximum continuous sharps in the string and then
+        quote it with an extra sharp.
+        """
+        max_sharps = 0
+        current_sharps = 0
+        for char in string:
+            if char == "#":
+                current_sharps += 1
+                max_sharps = max(current_sharps, max_sharps)
+            else:
+                current_sharps = 0
+        wrapping = "#" * (max_sharps + 1)
+        return f"r{wrapping}'{string}'{wrapping}"
+
     def replacements(self, creator, dest_folder):
         # Due to nushell scoping, it isn't easy to create a function that will
         # deactivate the environment. For that reason a __DEACTIVATE_PATH__
diff --git a/src/virtualenv/activation/powershell/__init__.py b/src/virtualenv/activation/powershell/__init__.py
index 4fadc63..b7b40bf 100644
--- a/src/virtualenv/activation/powershell/__init__.py
+++ b/src/virtualenv/activation/powershell/__init__.py
@@ -1,10 +1,25 @@
-from __future__ import absolute_import, unicode_literals
+from __future__ import annotations
 
-from virtualenv.util.path import Path
-
-from ..via_template import ViaTemplateActivator
+from virtualenv.activation.via_template import ViaTemplateActivator
 
 
 class PowerShellActivator(ViaTemplateActivator):
     def templates(self):
-        yield Path("activate.ps1")
+        yield "activate.ps1"
+
+    @staticmethod
+    def quote(string):
+        """
+        This should satisfy PowerShell quoting rules [1], unless the quoted
+        string is passed directly to Windows native commands [2].
+
+        [1]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules
+        [2]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing#passing-arguments-that-contain-quote-characters
+        """  # noqa: D205
+        string = string.replace("'", "''")
+        return f"'{string}'"
+
+
+__all__ = [
+    "PowerShellActivator",
+]
\ No newline at end of file
diff --git a/src/virtualenv/activation/python/__init__.py b/src/virtualenv/activation/python/__init__.py
index 9e57912..31b29f6 100644
--- a/src/virtualenv/activation/python/__init__.py
+++ b/src/virtualenv/activation/python/__init__.py
@@ -14,9 +14,14 @@ class PythonActivator(ViaTemplateActivator):
     def templates(self):
         yield Path("activate_this.py")
 
-    def replacements(self, creator, dest_folder):
+    @staticmethod
+    def quote(string):
+        return repr(string)
+
+    def replacements(self, creator, dest_folder):
         replacements = super(PythonActivator, self).replacements(creator, dest_folder)
         lib_folders = OrderedDict((os.path.relpath(str(i), str(dest_folder)), None) for i in creator.libs)
+        lib_folders = os.pathsep.join(lib_folders.keys())
         win_py2 = creator.interpreter.platform == "win32" and creator.interpreter.version_info.major == 2
         replacements.update(
             {
diff --git a/src/virtualenv/activation/python/activate_this.py b/src/virtualenv/activation/python/activate_this.py
index 29debe3..b3ccdf9 100644
--- a/src/virtualenv/activation/python/activate_this.py
+++ b/src/virtualenv/activation/python/activate_this.py
@@ -15,17 +15,18 @@ except NameError:
     raise AssertionError("You must use exec(open(this_file).read(), {'__file__': this_file}))")
 
 bin_dir = os.path.dirname(abs_file)
-base = bin_dir[: -len("__BIN_NAME__") - 1]  # strip away the bin part from the __file__, plus the path separator
+base = bin_dir[: -len(__BIN_NAME__) - 1]  # strip away the bin part from the __file__, plus the path separator
 
 # prepend bin to PATH (this file is inside the bin directory)
 os.environ["PATH"] = os.pathsep.join([bin_dir] + os.environ.get("PATH", "").split(os.pathsep))
 os.environ["VIRTUAL_ENV"] = base  # virtual env is right above bin directory
+os.environ["VIRTUAL_ENV_PROMPT"] = __VIRTUAL_PROMPT__ or os.path.basename(base)
 
 # add the virtual environments libraries to the host python import mechanism
 prev_length = len(sys.path)
-for lib in "__LIB_FOLDERS__".split(os.pathsep):
+for lib in __LIB_FOLDERS__.split(os.pathsep):
     path = os.path.realpath(os.path.join(bin_dir, lib))
-    site.addsitedir(path.decode("utf-8") if "__DECODE_PATH__" else path)
+    site.addsitedir(path.decode("utf-8") if __DECODE_PATH__ else path)
 sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]
 
 sys.real_prefix = sys.prefix
diff --git a/src/virtualenv/activation/via_template.py b/src/virtualenv/activation/via_template.py
index 14f0979..3de0ad5 100644
--- a/src/virtualenv/activation/via_template.py
+++ b/src/virtualenv/activation/via_template.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import, unicode_literals
 
 import os
+import shlex
 import sys
 from abc import ABCMeta, abstractmethod
 
@@ -22,6 +23,15 @@ class ViaTemplateActivator(Activator):
     def templates(self):
         raise NotImplementedError
 
+    @staticmethod
+    def quote(string):
+        """
+        Quote strings in the activation script.
+        :param string: the string to quote
+        :return: quoted string that works in the activation script
+        """
+        return shlex.quote(string)
+
     def generate(self, creator):
         dest_folder = creator.bin_dir
         replacements = self.replacements(creator, dest_folder)
@@ -57,8 +67,8 @@ class ViaTemplateActivator(Activator):
         binary = read_binary(self.__module__, str(template))
         text = binary.decode("utf-8", errors="strict")
         for key, value in replacements.items():
-            value = self._repr_unicode(creator, value)
-            text = text.replace(key, value)
+            value_uni = self._repr_unicode(creator, value)
+            text = text.replace(key, self.quote(value_uni))
         return text
 
     @staticmethod
-- 
2.45.2

