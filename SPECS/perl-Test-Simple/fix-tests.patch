From ba1327f75f69d13557974207f6f99e6f77834979 Mon Sep 17 00:00:00 2001
From: Yves Orton <demerphq@gmail.com>
Date: Mon, 6 Mar 2023 13:35:30 +0100
Subject: [PATCH 1/2] More.pm - make isn::t() produce deprecation warnings

Use of apostrophe as a package separator was deprecated in Perl 5.37.9,
and will be removed outright by Perl 5.42.0. So rework isn::t() to produce
warnings when this happens. The tests do not actually use the apostrophe
spelling, so this is safe. The warning message can be silence by disabling
deprecated warnings
---
 lib/Test/More.pm     | 29 +++++++++++++++++++++++++----
 t/Legacy/More.t      | 21 +++++++++++++++++++--
 t/Legacy/fail-more.t | 20 ++++++++++++++++----
 3 files changed, 60 insertions(+), 10 deletions(-)

diff --git a/lib/Test/More.pm b/lib/Test/More.pm
index 9adf576..1711306 100644
--- a/lib/Test/More.pm
+++ b/lib/Test/More.pm
@@ -394,8 +394,13 @@ different from some other value:
 
   isnt $obj, $clone, "clone() produces a different object";
 
-For those grammatical pedants out there, there's an C<isn't()>
-function which is an alias of C<isnt()>.
+Historically we supported an C<isn't()> function as an alias of
+C<isnt()>, however in Perl 5.37.9 support for the use of aprostrophe as
+a package separator was deprecated and by Perl 5.42.0 support for it
+will have been removed completely. Accordingly use of C<isn't()> is also
+deprecated, and will produce warnings when used unless 'deprecated'
+warnings are specifically disabled in the scope where it is used. You
+are strongly advised to migrate to using C<isnt()> instead.
 
 =cut
 
@@ -411,8 +416,24 @@ sub isnt ($$;$) {
     return $tb->isnt_eq(@_);
 }
 
-*isn't = \&isnt;
-# ' to unconfuse syntax higlighters
+# Historically it was possible to use apostrophes as a package
+# separator. make this available as isn't() for perl's that support it.
+# However in 5.37.9 the apostrophe as a package separator was
+# deprecated, so warn users of isn't() that they should use isnt()
+# instead. We assume that if they are calling isn::t() they are doing so
+# via isn't() as we have no way to be sure that they aren't spelling it
+# with a double colon. We only trigger the warning if deprecation
+# warnings are enabled, so the user can silence the warning if they
+# wish.
+sub isn::t {
+    if (warnings::enabled("deprecated")) {
+        _carp
+        "Use of apostrophe as package separator was deprecated in Perl 5.37.9,\n",
+        "and will be removed in Perl 5.42.0.  You should change code that uses\n",
+        "Test::More::isn't() to use Test::More::isnt() as a replacement";
+    }
+    goto &isnt;
+}
 
 =item B<like>
 
diff --git a/t/Legacy/More.t b/t/Legacy/More.t
index ce535e2..b91234a 100644
--- a/t/Legacy/More.t
+++ b/t/Legacy/More.t
@@ -8,7 +8,7 @@ BEGIN {
 }
 
 use lib 't/lib';
-use Test::More tests => 54;
+use Test::More tests => 57;
 
 # Make sure we don't mess with $@ or $!.  Test at bottom.
 my $Err   = "this should not be touched";
@@ -24,7 +24,24 @@ require_ok('Test::More');
 ok( 2 eq 2,             'two is two is two is two' );
 is(   "foo", "foo",       'foo is foo' );
 isnt( "foo", "bar",     'foo isnt bar');
-isn't("foo", "bar",     'foo isn\'t bar');
+{
+    use warnings;
+    my $warning;
+    local $SIG{__WARN__}= sub { $warning = $_[0] };
+    isn::t("foo", "bar",     'foo isn\'t bar');
+    is($warning, "Use of apostrophe as package separator was deprecated in Perl 5.37.9,\n"
+               . "and will be removed in Perl 5.42.0.  You should change code that uses\n"
+               . "Test::More::isn't() to use Test::More::isnt() as a replacement"
+               . " at t/Legacy/More.t line 31\n",
+            "Got expected warning from isn::t() under use warnings");
+}
+{
+    no warnings "deprecated";
+    my $warning;
+    local $SIG{__WARN__}= sub { $warning = $_[0] };
+    isn::t("foo", "bar",     'foo isn\'t bar');
+    is($warning, undef, "No warnings from isn::t() under no warnings deprecated");
+}
 
 #'#
 like("fooble", '/^foo/',    'foo is like fooble');
diff --git a/t/Legacy/fail-more.t b/t/Legacy/fail-more.t
index 3d28fbb..6abda9f 100644
--- a/t/Legacy/fail-more.t
+++ b/t/Legacy/fail-more.t
@@ -26,7 +26,7 @@ package My::Test;
 # Test::Builder's own and the ending diagnostics don't come out right.
 require Test::Builder;
 my $TB = Test::Builder->create;
-$TB->plan(tests => 80);
+$TB->plan(tests => 81);
 
 sub like ($$;$) {
     $TB->like(@_);
@@ -41,6 +41,14 @@ sub main::out_ok ($$) {
     $TB->is_eq( $err->read, shift );
 }
 
+sub main::out_warn_ok ($$$) {
+    $TB->is_eq( $out->read, shift );
+    $TB->is_eq( $err->read, shift );
+    my $warning_expected = shift;
+    $warning_expected =~ s/^# //mg;
+    $TB->is_eq( $main::warning, $warning_expected );
+}
+
 sub main::out_like ($$) {
     my($output, $failure) = @_;
 
@@ -59,7 +67,7 @@ $out->read;  # clear the plan from $out
 
 # This should all work in the presence of a __DIE__ handler.
 local $SIG{__DIE__} = sub { $TB->ok(0, "DIE handler called: ".join "", @_); };
-
+local $SIG{__WARN__} = sub { $main::warning = $_[0]; };
 
 my $tb = Test::More->builder;
 $tb->use_numbers(0);
@@ -133,8 +141,8 @@ OUT
 ERR
 
 #line 132
-isn't("foo", "foo",'foo isn\'t foo?' );
-out_ok( <<OUT, <<ERR );
+isn::t("foo", "foo",'foo isn\'t foo?' );
+out_warn_ok( <<OUT, <<ERR, <<WARN );
 not ok - foo isn't foo?
 OUT
 #   Failed test 'foo isn\'t foo?'
@@ -142,6 +150,10 @@ OUT
 #          got: 'foo'
 #     expected: anything else
 ERR
+# Use of apostrophe as package separator was deprecated in Perl 5.37.9,
+# and will be removed in Perl 5.42.0.  You should change code that uses
+# Test::More::isn't() to use Test::More::isnt() as a replacement at t/Legacy/fail-more.t line 132
+WARN
 
 #line 143
 isnt(undef, undef, 'undef isnt undef?');
-- 
2.45.3


From d0fab28be562788da60f9a82de55f8f9c4a49f39 Mon Sep 17 00:00:00 2001
From: Graham Knop <haarg@haarg.org>
Date: Wed, 25 Aug 2021 17:08:39 +0200
Subject: [PATCH 2/2] use forced bool values for ready and complete in file rpc

Perl core may be adding trackable bool values.  This could impact the
output of Data::Dumper. Since we are comparing the output of
Data::Dumper in our internal is_deeply checks, make sure the values used
in some places are real bool values so their serialization will match.
---
 lib/Test2/IPC/Driver/Files.pm      |  4 ++--
 t/Test2/modules/IPC/Driver/Files.t | 24 ++++++++++++------------
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/lib/Test2/IPC/Driver/Files.pm b/lib/Test2/IPC/Driver/Files.pm
index f033969..30760ee 100644
--- a/lib/Test2/IPC/Driver/Files.pm
+++ b/lib/Test2/IPC/Driver/Files.pm
@@ -296,8 +296,8 @@ sub parse_event_filename {
 
     return {
         file     => $file,
-        ready    => $ready,
-        complete => $complete,
+        ready    => !!$ready,
+        complete => !!$complete,
         global   => $global,
         type     => $type,
         hid      => $hid,
diff --git a/t/Test2/modules/IPC/Driver/Files.t b/t/Test2/modules/IPC/Driver/Files.t
index f896db0..11fef62 100644
--- a/t/Test2/modules/IPC/Driver/Files.t
+++ b/t/Test2/modules/IPC/Driver/Files.t
@@ -357,8 +357,8 @@ ok(!-d $tmpdir, "cleaned up temp dir");
     is_deeply(
         $ipc->parse_event_filename(join ipc_separator, qw'GLOBAL 123 456 789 Event Type Foo.ready.complete'),
         {
-            ready    => 1,
-            complete => 1,
+            ready    => !!1,
+            complete => !!1,
             global   => 1,
             type     => "Event::Type::Foo",
             hid      => "GLOBAL",
@@ -373,8 +373,8 @@ ok(!-d $tmpdir, "cleaned up temp dir");
     is_deeply(
         $ipc->parse_event_filename(join ipc_separator, qw'GLOBAL 123 456 789 Event Type Foo.ready'),
         {
-            ready    => 1,
-            complete => 0,
+            ready    => !!1,
+            complete => !!0,
             global   => 1,
             type     => "Event::Type::Foo",
             hid      => "GLOBAL",
@@ -389,8 +389,8 @@ ok(!-d $tmpdir, "cleaned up temp dir");
     is_deeply(
         $ipc->parse_event_filename(join ipc_separator, qw'GLOBAL 123 456 789 Event Type Foo'),
         {
-            ready    => 0,
-            complete => 0,
+            ready    => !!0,
+            complete => !!0,
             global   => 1,
             type     => "Event::Type::Foo",
             hid      => "GLOBAL",
@@ -405,8 +405,8 @@ ok(!-d $tmpdir, "cleaned up temp dir");
     is_deeply(
         $ipc->parse_event_filename(join ipc_separator, qw'1 1 1 1 123 456 789 Event Type Foo.ready.complete'),
         {
-            ready    => 1,
-            complete => 1,
+            ready    => !!1,
+            complete => !!1,
             global   => 0,
             type     => "Event::Type::Foo",
             hid      => "1${sep}1${sep}1${sep}1",
@@ -421,8 +421,8 @@ ok(!-d $tmpdir, "cleaned up temp dir");
     is_deeply(
         $ipc->parse_event_filename(join ipc_separator, qw'1 2 3 4 123 456 789 Event Type Foo.ready'),
         {
-            ready    => 1,
-            complete => 0,
+            ready    => !!1,
+            complete => !!0,
             global   => 0,
             type     => "Event::Type::Foo",
             hid      => "1${sep}2${sep}3${sep}4",
@@ -437,8 +437,8 @@ ok(!-d $tmpdir, "cleaned up temp dir");
     is_deeply(
         $ipc->parse_event_filename(join ipc_separator, qw'3 2 11 12 123 456 789 Event'),
         {
-            ready    => 0,
-            complete => 0,
+            ready    => !!0,
+            complete => !!0,
             global   => 0,
             type     => "Event",
             hid      => "3${sep}2${sep}11${sep}12",
-- 
2.45.3

