# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# This template will calculate a list of toolchain packages that might need to be re-tested at a later stage.
# It assumes a toolchain build has already been performed in the same job.

# Output pipeline variables set by this template:
# - CalculateToolchainPackageRetestList.toolchainPackageRetestList

parameters:
  - name: buildRepoRoot
    type: string
    default: "$(Build.SourcesDirectory)"

  - name: ignoredSpecs
    type: object
    default: []

steps:
  - bash: |
      array_contains() {
          local -n __array=$1
          local value=$2

          for item in "${__array[@]}"; do
              if [[ "$item" == "$value" ]]; then
                  return 0
              fi
          done

          return 1
      }

      ignored_specs=(${{ join(parameters.ignoredSpecs, ' ') }})

      # Calculate the list of packages that should be re-tested during full package build.
      #   This list will be the contents of 'built_specs_list.txt' in the toolchain build logs directory, but only for
      #   packages that have a '%check' section in their spec file. The assumption is that all packages will have a 
      #   '%check' section for all architectures, or none.
      built_list="${{ parameters.buildRepoRoot }}"/build/logs/toolchain/built_specs_list.txt
      specs_dir="${{ parameters.buildRepoRoot }}/SPECS/"
      if [[ -f "$built_list" ]]; then
        retest_list=()
        while read -r spec; do
          if [ ! -f "${specs_dir}/${spec}/${spec}".spec ]; then
              echo "##[error]ERROR: '${specs_dir}/${spec}/${spec}.spec' does not exist"
              exit 1
          fi

          if grep -q '^%check' "${specs_dir}/${spec}/${spec}.spec"; then
              if ! array_contains ignored_specs "${spec}"; then
                retest_list+=("${spec}")
              fi
          fi
        done < "$built_list"
      else
        echo "No file '$built_list' found, so no packages to re-test"
      fi
      # Default will be "", which is fine.

      echo "Setting 'CalculateToolchainPackageRetestList.toolchainPackageRetestList' to '${retest_list[*]}'"
      echo "##vso[task.setvariable variable=toolchainPackageRetestList;isOutput=true]${retest_list[*]}"
    name: "CalculateToolchainPackageRetestList"
    displayName: "Calculating packages that should be re-tested"
