--- commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/internal/Closure.java.orig	2024-06-02 07:52:21.000000000 -0600
+++ commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/internal/Closure.java	2024-06-06 10:17:46.723573140 -0600
@@ -78,7 +78,7 @@ public class Closure extends Script {
      * <p>Assign this lambda in its own frame if the symbol it is assigned to in its definition scope
      * is captured in its body.</p>
      * <p>This done allow a locally defined function to "see" and call  itself as a local (captured) variable.</p>
-     * Typical case is: <code>const f = (x)->x <= 0? 1 : x*f(x-1)</code>. Since assignment of f occurs after
+     * Typical case is: <code>const f = (x)-&gt;x &lt;= 0? 1 : x*f(x-1)</code>. Since assignment of f occurs after
      * the lambda creation, we need to patch the lambda frame to expose itself through the captured symbol.
      * @param parentFrame the parent calling frame
      * @param symbol the symbol index (in the caller of this closure)
--- commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/JexlArithmetic.java.orig	2024-06-02 07:52:21.000000000 -0600
+++ commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/JexlArithmetic.java	2024-06-06 10:18:40.081854677 -0600
@@ -1631,7 +1631,7 @@ public class JexlArithmetic {
 
     /**
      * Convert a string to a BigDecimal.
-     * <>Empty string is considered as 0.</>
+     * Empty string is considered as 0.
      * @param arg the arg
      * @return a BigDecimal
      * @throws CoercionException if the string can not be coerced into a BigDecimal
@@ -1648,7 +1648,7 @@ public class JexlArithmetic {
 
     /**
      * Converts a string to a big integer.
-     * <>Empty string is considered as 0.</>
+     * Empty string is considered as 0.
      * @param arg the arg
      * @return a big integer
      * @throws ArithmeticException if the string can not be coerced into a big integer
@@ -1665,7 +1665,7 @@ public class JexlArithmetic {
 
     /**
      * Convert a string to a double.
-     * <>Empty string is considered as NaN.</>
+     * Empty string is considered as NaN.
      * @param arg the arg
      * @return a double
      * @throws ArithmeticException if the string can not be coerced into a double
--- commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/parser/ASTTryStatement.java.orig	2024-06-02 07:52:21.000000000 -0600
+++ commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/parser/ASTTryStatement.java	2024-06-06 10:16:33.276562087 -0600
@@ -21,7 +21,7 @@ package org.apache.commons.jexl3.parser;
  */
 public class ASTTryStatement extends JexlNode {
     private static final long serialVersionUID = 1L;
-    /** catch() &= 1, finally &= 2. */
+    /** catch() &amp;= 1, finally &amp;= 2. */
     private int tryForm;
 
     public ASTTryStatement(final int id) {
--- commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt.orig	2024-06-02 07:52:21.000000000 -0600
+++ commons-jexl3-3.4.0-src/src/main/java/org/apache/commons/jexl3/parser/Parser.jjt	2024-06-06 10:19:46.408961574 -0600
@@ -659,7 +659,7 @@ void AssignmentExpression() #void : {}
 }
 
 /***************************************
- *      Conditional & relational
+ *      Conditional &amp; relational
  ***************************************/
 
 void ConditionalExpression() #void : {}
@@ -821,7 +821,7 @@ void PostfixExpression() #void : {}
 }
 
 /***************************************
- *      Identifier & Literals
+ *      Identifier &amp; Literals
  ***************************************/
 
 void Identifier(boolean top) :
@@ -979,7 +979,7 @@ void SetLiteral() : {}
 
 
 /***************************************
- *      Functions & Methods
+ *      Functions &amp; Methods
  ***************************************/
 
 void Arguments() #Arguments : {}
