#! /bin/bash
# Generated automatically from pppoe-connect.in by configure.
#***********************************************************************
#
# pppoe-connect
#
# Shell script to connect to an PPPoE provider using PPPoE
#
# Copyright (C) 2000 Roaring Penguin Software Inc.
#
# $Id$
#
# This file may be distributed under the terms of the GNU General
# Public License.
#
# Usage: pppoe-connect [config_file]
#        pppoe-connect interface user [config_file]
# Second form overrides USER and ETH from config file.
# If config_file is omitted, defaults to /etc/ppp/pppoe.conf
#
#***********************************************************************

# From AUTOCONF
prefix=/usr
exec_prefix=/usr
localstatedir=/var

# Paths to programs
IP=/usr/sbin/ip
PPPD=/usr/sbin/pppd
SETSID=/usr/bin/setsid
PPPOE=/usr/sbin/pppoe
BR2684CTL=/usr/sbin/br2684ctl
LOGGER="/usr/bin/logger -t `basename $0`"
NETWORKDIR=/etc/sysconfig/network-scripts
LS=/usr/bin/ls

get_device() {
    if [ ! -d $NETWORKDIR ] ; then
        $ECHO "** $NETWORKDIR not found"
        $ECHO "** Quitting"
        exit 1
    fi

    cd $NETWORKDIR
    interfaces=$($LS ifcfg-ppp* 2>/dev/null | egrep -v '(~|\.bak)$' | \
                 egrep -v '(rpmsave|rpmorig|rpmnew)' | sed 's/^ifcfg-//g')

    for i in $interfaces ; do
        test -f ifcfg-$i && . ifcfg-$i 2>/dev/null
        if [ "$TYPE" = "xDSL" ] ; then
            CONFIG=$NETWORKDIR/ifcfg-$i
            break
        fi
    done
}

# Set to "C" locale so we can parse messages from commands
LANG=C
export LANG

# Must be root
if test "`/usr/bin/id -u`" != 0 ; then
    echo "$0: You must be root to run this script" >& 2
    exit 1
fi

if test "$SETSID" != "" -a ! -x "$SETSID"; then
    SETSID=""
fi

USER=""
ETH=""

# Sort out command-line arguments
case "$#" in
    1)
	CONFIG="$1"
	;;
    3)
	CONFIG="$3"
	;;
esac

if [ -z "$CONFIG" ] ; then
    get_device
    [ -z "$CONFIG" ] && CONFIG=/etc/ppp/pppoe.conf
fi

if test ! -f "$CONFIG" -o ! -r "$CONFIG" ; then
    echo "$0: Cannot read configuration file '$CONFIG'" >& 2
    exit 1
fi

export CONFIG
. $CONFIG

DEVNAME="$DEVICE"
PPPOE_PIDFILE="$PIDFILE.pppoe"
PPPD_PIDFILE="$PIDFILE.pppd"

if [ "$CONFIG" != "/etc/ppp/pppoe.conf" ] ; then
   DEVNAME=`basename $CONFIG | sed 's/^ifcfg-//g'`
fi

if [ -n "$BR2684DEV" ]; then
	[ -z "$ETH" ] && ETH="nas$BR2684DEV"
	modprobe br2684 > /dev/null 2>&1
fi

# Check for command-line overriding of ETH and USER
case "$#" in
    2|3)
	ETH="$1"
	USER="$2"
	;;
esac

# Check that config file is sane
if test "$USER" = "" ; then
    echo "$0: Check '$CONFIG' -- no setting for USER" >& 2
    exit 1
fi
if test "`basename \"$LINUX_PLUGIN\"`" = "pppoatm.so" ; then
    if test "$VCI" = "" ; then
	echo "$0: Check '$CONFIG' -- no setting for VCI" >& 2
	exit 1
    fi
    if test "$VPI" = "" ; then
	echo "$0: Check '$CONFIG' -- no setting for VPI" >& 2
	exit 1
    fi
else
    if test "$ETH" = "" ; then
	echo "$0: Check '$CONFIG' -- no setting for ETH" >& 2
	exit 1
    fi
fi

PPPD_PID=0

# Catch common error
if test "$DEBUG" = "1" ; then
    echo "*** If you want to use DEBUG, invoke pppoe-start, not pppoe-connect."
    exit 1
fi

if test "$DEBUG" != "" ; then
    if test "$LINUX_PLUGIN" != "" ; then
	echo "Cannot use DEBUG mode and LINUX_PLUGIN at the same time."
	echo "Kernel-mode PPPoE is experimental and unsupported."
	exit 1
    fi
    echo "* The following section identifies your Ethernet interface" >> $DEBUG
    echo "* and user name.  Some ISP's need 'username'; others" >> $DEBUG
    echo "* need 'username@isp.com'.  Try both" >> $DEBUG
    echo "ETH=$ETH; USER=$USER" >> $DEBUG
    echo "---------------------------------------------" >> $DEBUG
fi

# MTU of Ethernet card attached to modem MUST be 1500.  This apparently
# fails on some *BSD's, so we'll only do it under Linux

if test `uname -s` = Linux ; then
    $IP link set $ETH up mtu 1500 
    # For 2.4 kernels.  Will fail on 2.2.x, but who cares?
    modprobe ppp_generic > /dev/null 2>&1
    modprobe ppp_async > /dev/null 2>&1
    modprobe ppp_synctty > /dev/null 2>&1
    if test -n "$LINUX_PLUGIN" ; then
	modprobe pppox > /dev/null 2>&1
	modprobe pppoe > /dev/null 2>&1
    fi
fi

if test "$SYNCHRONOUS" = "yes" ; then
	PPPOE_SYNC=-s
	PPPD_SYNC=sync
	# Increase the chances of it working on Linux...
	if test `uname -s` = Linux ; then
	    modprobe n_hdlc > /dev/null 2>&1
	fi
else
	PPPOE_SYNC=""
	PPPD_SYNC=""
fi

if test -n "$ACNAME" ; then
    ACNAME="-C $ACNAME"
fi

if test -n "$SERVICENAME" ; then
    SERVICENAMEOPT="-S $SERVICENAME"
else
    SERVICENAMEOPT=""
fi

if test "$CLAMPMSS" = "no" ; then
	CLAMPMSS=""
else
	CLAMPMSS="-m $CLAMPMSS"
fi

# If DNSTYPE is SERVER, we must use "usepeerdns" option to pppd.
if test "$DNSTYPE" = "SERVER" ; then
	PEERDNS=yes
   USEPEERDNS=yes
fi

if test "$PEERDNS" = "yes" ; then
	PEERDNS="usepeerdns"
else
	PEERDNS=""
fi

# Backward config file compatibility -- PEERDNS used to be USEPEERDNS
if test "$USEPEERDNS" = "yes" ; then
    PEERDNS="usepeerdns"
fi
if test "$USEPEERDNS" = "no" ; then
    PEERDNS=""
fi

if [ -z "$DEVICE" ] ; then
    IPPARAM=""
    LINKNAME=""
else
    IPPARAM="ipparam ${DEVNAME}"
    LINKNAME="linkname ${DEVICE}"
fi

[ -z "$MTU" ] && MTU="1492"
[ -z "$MRU" ] && MRU="1492"

# Backward config file compatibility
if test "$DEMAND" = "" ; then
	DEMAND=no
fi

if test "$DEMAND" = "no" ; then
	DEMAND=""
else
	[ -z "$IPADDR" ] && IPADDR=10.112.112.112
	[ -z "$REMIP" ]  && REMIP=10.112.112.113

	DEMAND="demand persist idle $CONNECT_TIMEOUT $IPADDR:$REMIP ipcp-accept-remote ipcp-accept-local noipdefault ktune"
	# The plugin doesn't need (and may not _accept_) the 'connect' option
	if [ -z "$LINUX_PLUGIN" ]; then
		DEMAND="$DEMAND connect true"
	fi
fi

case "$FIREWALL" in
    STANDALONE)
	. /etc/ppp/firewall-standalone
	;;
    MASQUERADE)
	. /etc/ppp/firewall-masq
	;;
esac

# If we're using kernel-mode PPPoE on Linux...
if test "`basename \"$LINUX_PLUGIN\"`" = "rp-pppoe.so" ; then
    PLUGIN_OPTS="plugin $LINUX_PLUGIN nic-$ETH"
    if test -n "$SERVICENAME" ; then
       PLUGIN_OPTS="$PLUGIN_OPTS rp_pppoe_service $SERVICENAME"
    fi
    modprobe pppoe > /dev/null 2>&1
fi
# If we're using kernel-mode PPPoATM on Linux...
if test "`basename \"$LINUX_PLUGIN\"`" = "pppoatm.so" ; then
    PLUGIN_OPTS="plugin $LINUX_PLUGIN"

    # Interface name MUST BE LAST!!
    PLUGIN_OPTS="$PLUGIN_OPTS $VPI.$VCI"
    modprobe pppoatm > /dev/null 2>&1
fi
if test "$DEFROUTE" != "no" ; then
    DEFAULTROUTE="defaultroute"
    # pppd will no longer delete an existing default route
    # so we have to help it out a little here.
    DEFRT=$(ip route list match 0/0)
    [ -n "${DEFRT}" ] && echo "$DEFRT" > /etc/default-routes
    echo "$DEFRT" | while read spec; do
        $IP route del $spec;
    done
else
    DEFAULTROUTE=""
fi

# Standard PPP options we always use
PPP_STD_OPTIONS="$IPPARAM $LINKNAME $PLUGIN_OPTS noipdefault noauth default-asyncmap $DEFAULTROUTE hide-password nodetach $PEERDNS mtu $MTU mru $MRU noaccomp nodeflate nopcomp novj novjccomp user $USER lcp-echo-interval $LCP_INTERVAL lcp-echo-failure $LCP_FAILURE $PPPD_EXTRA"

# PPPoE invocation
PPPOE_CMD="$PPPOE -p $PPPOE_PIDFILE -I $ETH -T $PPPOE_TIMEOUT -U $PPPOE_SYNC $CLAMPMSS $ACNAME $SERVICENAMEOPT $PPPOE_EXTRA"
if test "$DEBUG" != "" ; then
    if test "$DEMAND" != "" ; then
	echo "(Turning off DEMAND for debugging purposes)"
	DEMAND=""
    fi
    echo "* The following section shows the pppd command we will invoke" >> $DEBUG
    echo "pppd invocation" >> $DEBUG
    echo "$SETSID $PPPD pty '$PPPOE_CMD' $PPP_STD_OPTIONS $PPPD_SYNC debug" >> $DEBUG
    echo "---------------------------------------------" >> $DEBUG
    $SETSID $PPPD pty "$PPPOE_CMD -D $DEBUG-0" \
	$PPP_STD_OPTIONS \
	$PPPD_SYNC \
	debug >> $DEBUG 2>&1
    echo "---------------------------------------------" >> $DEBUG
    echo "* The following section is an extract from your log." >> $DEBUG
    echo "* Look for error messages from pppd, such as" >> $DEBUG
    echo "* a lack of kernel support for PPP, authentication failure" >> $DEBUG
    echo "* etc." >> $DEBUG
    if test -f "/var/log/messages" ; then
	echo "Extract from /var/log/messages" >> $DEBUG
	grep 'ppp' /var/log/messages | tail -150 >> $DEBUG
    elif test -f "/var/adm/messages"; then
	echo "Extract from /var/adm/messages" >> $DEBUG
	grep 'ppp' /var/adm/messages | tail -150 >> $DEBUG
    else
        echo "Can't find messages file (looked for /var/{log,adm}/messages" >> $DEBUG
    fi
    date >> $DEBUG
    echo "---------------------------------------------" >> $DEBUG
    echo "* The following section is a dump of the packets" >> $DEBUG
    echo "* sent and received by rp-pppoe.  If you don't see" >> $DEBUG
    echo "* any output, it's an Ethernet driver problem.  If you only" >> $DEBUG
    echo "* see three PADI packets and nothing else, check your cables" >> $DEBUG
    echo "* and modem.  Make sure the modem lights flash when you try" >> $DEBUG
    echo "* to connect.  Check that your Ethernet card is in" >> $DEBUG
    echo "* half-duplex, 10Mb/s mode.  If all else fails," >> $DEBUG
    echo "* try using pppoe-sniff." >> $DEBUG
    echo "rp-pppoe debugging dump" >> $DEBUG
    cat $DEBUG-0 >> $DEBUG
    rm -f $DEBUG-0
    for i in 1 2 3 4 5 6 7 8 9 10 ; do
    echo ""
    echo ""
    echo ""
    done
    echo "*** Finished debugging run.  Please review the file"
    echo "*** '$DEBUG' and try to"
    echo "*** figure out what is going on."
    echo "***"
    echo "*** Unfortunately, we can NO LONGER accept debugging"
    echo "*** output for analysis.  Please do not send this to"
    echo "*** Roaring Penguin; it is too time-consuming for"
    echo "*** us to deal with all the analyses we have been sent."
    exit 0
fi

echo $$ > $PIDFILE

while [ true ] ; do
    if [ "${DEFROUTE}" != "no" ] ; then
        DEFRT=$(ip route list match 0/0)
        [ -n "${DEFRT}" ] && echo "$DEFRT" > /etc/default-routes
        echo "$DEFRT" | while read spec; do
            $IP route del $spec;
        done
    fi

    if test "$BR2684DEV" != ""; then
        $BR2684CTL -b -c $BR2684DEV -a $VPI.$VCI
        $IP link set $ETH up
    fi
    if test "$OVERRIDE_PPPD_COMMAND" != "" ; then
       $SETSID $OVERRIDE_PPPD_COMMAND &
       echo "$!" > $PPPD_PIDFILE
    elif test "$LINUX_PLUGIN" != "" ; then
        $SETSID $PPPD $PPP_STD_OPTIONS $DEMAND &
        echo "$!" > $PPPD_PIDFILE
    else
        $SETSID $PPPD pty "$PPPOE_CMD" \
        $PPP_STD_OPTIONS \
        $DEMAND \
        $PPPD_SYNC &
        echo "$!" > $PPPD_PIDFILE
    fi
    wait
    if test "$BR2684DEV" != ""; then
        kill `cat /var/run/nas$BR2684DEV.pid`
        rm /var/run/nas$BR2684DEV.pid
    fi

    if test "$RETRY_ON_FAILURE" = "no" ; then
       exit
    fi

    # Run /etc/ppp/adsl-lost if it exists
    test -x /etc/ppp/adsl-lost && /etc/ppp/adsl-lost

    # Re-establish the connection
    $LOGGER -p daemon.notice "PPPoE connection lost; attempting re-connection."

    # Wait a bit in case a problem causes tons of log messages :-)
    sleep 5
done
