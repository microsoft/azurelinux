From cb54210f7f02b07768cfbf49ae266d487f580e1b Mon Sep 17 00:00:00 2001
From: rpm-build <rpm-build>
Date: Thu, 29 Jun 2017 15:32:58 +0200
Subject: [PATCH] Move /tmp to /var/tmp

Fedora is using tmpfs which is limited by the size of RAM, thus we need
to use different directory on different filesystem.

---
 ui/qt/about_dialog.cpp         |  3 +-
 ui/qt/iax2_analysis_dialog.cpp |  5 ++-
 ui/qt/utils/rtp_audio_file.cpp |  3 +-
 wsutil/tempfile.c              | 18 +++++++-
 wsutil/tempfile.h              |  2 +-
 wsutil/wstmpdir.c              | 71 ++++++++++++++++++++++++++++++++++
 wsutil/wstmpdir.h              | 39 +++++++++++++++++++
 7 files changed, 134 insertions(+), 7 deletions(-)
 create mode 100644 wsutil/wstmpdir.c
 create mode 100644 wsutil/wstmpdir.h

diff --git a/ui/qt/iax2_analysis_dialog.cpp b/ui/qt/iax2_analysis_dialog.cpp
index 07b9b42e01..fb09de989b 100644
--- a/ui/qt/iax2_analysis_dialog.cpp
+++ b/ui/qt/iax2_analysis_dialog.cpp
@@ -25,6 +25,7 @@
 #include "ui/rtp_stream.h"
 #endif
 #include <wsutil/utf8_entities.h>
+#include <wsutil/wstmpdir.h> /* for get_tmp_dir() */
 
 #include <wsutil/g711.h>
 #include <wsutil/pint.h>
@@ -255,10 +256,10 @@ Iax2AnalysisDialog::Iax2AnalysisDialog(QWidget &parent, CaptureFile &cf) :
 
     // We keep our temp files open for the lifetime of the dialog. The GTK+
     // UI opens and closes at various points.
-    QString tempname = QString("%1/wireshark_iax2_f").arg(QDir::tempPath());
+    QString tempname = QString("%1/wireshark_iax2_f").arg(get_tmp_dir());
     fwd_tempfile_ = new QTemporaryFile(tempname, this);
     fwd_tempfile_->open();
-    tempname = QString("%1/wireshark_iax2_r").arg(QDir::tempPath());
+    tempname = QString("%1/wireshark_iax2_r").arg(get_tmp_dir());
     rev_tempfile_ = new QTemporaryFile(tempname, this);
     rev_tempfile_->open();
 
diff --git a/ui/qt/utils/rtp_audio_file.cpp b/ui/qt/utils/rtp_audio_file.cpp
index 591a63bbf3..203f5c5286 100644
--- a/ui/qt/utils/rtp_audio_file.cpp
+++ b/ui/qt/utils/rtp_audio_file.cpp
@@ -31,6 +31,7 @@
 
 #include "rtp_audio_file.h"
 #include <ws_attributes.h>
+#include <wsutil/wstmpdir.h> /* for get_tmp_dir() */
 
 RtpAudioFile::RtpAudioFile(bool use_disk_for_temp, bool use_disk_for_frames):
       real_pos_(0)
@@ -45,7 +46,7 @@ RtpAudioFile::RtpAudioFile(bool use_disk_for_temp, bool use_disk_for_frames):
 
     tempname = "memory";
     if (use_disk_for_temp) {
-        tempname = QString("%1/wireshark_rtp_stream").arg(QDir::tempPath());
+        tempname = QString("%1/wireshark_rtp_stream").arg(get_tmp_dir());
         sample_file_ = new QTemporaryFile(tempname, this);
     } else {
         sample_file_ = new QBuffer(this);
diff --git a/wsutil/tempfile.c b/wsutil/tempfile.c
index 531ed91..bd6fd60 100644
--- a/wsutil/tempfile.c
+++ b/wsutil/tempfile.c
@@ -10,6 +10,8 @@
 
 #include "config.h"
 #include "tempfile.h"
+#include <wsutil/file_util.h>
+#include <wsutil/wstmpdir.h> /* for get_tmp_dir() */
 
 #include <errno.h>
 
@@ -39,7 +41,7 @@ sanitize_prefix(const char *prefix)
 
  /**
  * Create a tempfile with the given prefix (e.g. "wireshark"). The path
- * is created using g_file_open_tmp.
+ * is created using get_tmp_dir.
  *
  * @param tempdir [in] If not NULL, the directory in which to create the file.
  * @param namebuf [in,out] If not NULL, receives the full path of the temp file.
@@ -55,13 +57,25 @@ create_tempfile(const char *tempdir, char **namebuf, const char *pfx, const char
 {
   int fd;
   char *safe_pfx = sanitize_prefix(pfx);
+  gchar *tmp_file;
+  const char *tmp_dir;
+  int old_mask;
 
   if (tempdir == NULL || tempdir[0] == '\0') {
     /* Use OS default tempdir behaviour */
     char* filetmpl = ws_strdup_printf("%sXXXXXX%s", safe_pfx ? safe_pfx : "", sfx ? sfx : "");
     g_free(safe_pfx);
 
-    fd = g_file_open_tmp(filetmpl, namebuf, err);
+    tmp_dir = get_tmp_dir();
+    tmp_file = g_strconcat(tmp_dir, "/", filetmpl, NULL);
+
+    if (namebuf)
+      *namebuf = tmp_file;
+
+    old_mask = ws_umask(0077);
+    fd = mkstemps(tmp_file, sfx ? (int) strlen(sfx) : 0);
+    ws_umask(old_mask);
+
     g_free(filetmpl);
   }
   else {
diff --git a/wsutil/tempfile.h b/wsutil/tempfile.h
index 70031b5419..72011e265a 100644
--- a/wsutil/tempfile.h
+++ b/wsutil/tempfile.h
@@ -23,7 +23,7 @@ extern "C" {
 
 /**
  * Create a tempfile with the given prefix (e.g. "wireshark"). The path
- * is created using g_file_open_tmp.
+ * is created using get_tmp_dir and mkstemp.
  *
  * @param tempdir [in] If not NULL, the directory in which to create the file.
  * @param namebuf [in,out] If not NULL, receives the full path of the temp file.
diff --git a/wsutil/wstmpdir.c b/wsutil/wstmpdir.c
new file mode 100644
index 0000000000..9128d354ce
--- /dev/null
+++ b/wsutil/wstmpdir.c
@@ -0,0 +1,71 @@
+/* wstmpdir.c
+ *
+ * Copyright (C) 2013 Red Hat, Inc. All right reserved.
+ *
+ * Temporary directory routine
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Author: Peter Hatina <phatina@redhat.com>
+ */
+
+#include "config.h"
+
+#include <glib.h>
+#include "wstmpdir.h"
+
+/**
+ * Gets the directory to use for temporary files.
+ *
+ * Inspired by glib-2.0. If no TMP, TEMP or TMPDIR is set,
+ * /var/tmp is returned (Fedora specific).
+ *
+ * Returns: the directory to use for temporary files.
+ */
+const char *get_tmp_dir(void)
+{
+    static gchar *tmp_dir;
+
+    if (g_once_init_enter(&tmp_dir)) {
+        gchar *tmp;
+
+        tmp = g_strdup(g_getenv("TEMP"));
+        if (tmp == NULL || *tmp == '\0') {
+            g_free(tmp);
+            tmp = g_strdup(g_getenv("TMPDIR"));
+        }
+
+#ifdef P_tmpdir
+        if (tmp == NULL || *tmp == '\0') {
+            gsize k;
+            g_free(tmp);
+            tmp = g_strdup(P_tmpdir);
+            k = strlen(tmp);
+            if (k > 1 && G_IS_DIR_SEPARATOR(tmp[k - 1]))
+                tmp[k - 1] = '\0';
+            fprintf(stderr, "Using P_tmpdir: %s\n", P_tmpdir);
+        }
+#endif /* P_tmpdir */
+
+        if (tmp == NULL || *tmp == '\0') {
+            g_free(tmp);
+            tmp = g_strdup("/var/tmp");
+        }
+
+        g_once_init_leave(&tmp_dir, tmp);
+    }
+
+    return tmp_dir;
+}
diff --git a/wsutil/wstmpdir.h b/wsutil/wstmpdir.h
new file mode 100644
index 0000000000..07ac5837ac
--- /dev/null
+++ b/wsutil/wstmpdir.h
@@ -0,0 +1,39 @@
+/* wstmpdir.c
+ *
+ * Copyright (C) 2013 Red Hat, Inc. All right reserved.
+ *
+ * Temporary directory routine
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Author: Peter Hatina <phatina@redhat.com>
+ */
+
+#ifndef __WS_TMP_DIR_H__
+#define __WS_TMP_DIR_H__
+
+#include "ws_symbol_export.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif // __cplusplus
+
+WS_DLL_PUBLIC const char *get_tmp_dir(void);
+
+#ifdef __cplusplus
+}
+#endif // __cplusplus
+
+#endif
-- 
2.37.3

diff --git a/ui/qt/about_dialog.cpp b/ui/qt/about_dialog.cpp
index ea11122..982ba1a 100644
--- a/ui/qt/about_dialog.cpp
+++ b/ui/qt/about_dialog.cpp
@@ -14,6 +14,7 @@
 
 #include "main_application.h"
 #include <wsutil/filesystem.h>
+#include <wsutil/wstmpdir.h> /* for get_tmp_dir() */
 
 #include <QDesktopServices>
 #include <QUrl>
@@ -204,7 +205,7 @@ FolderListModel::FolderListModel(QObject * parent):
     appendRow(QStringList() << tr("\"File\" dialog location") << get_open_dialog_initial_dir() << tr("Capture files"));
 
     /* temp */
-    appendRow(QStringList() << tr("Temp") << (global_capture_opts.temp_dir && global_capture_opts.temp_dir[0] ? global_capture_opts.temp_dir : g_get_tmp_dir())
+    appendRow(QStringList() << tr("Temp") << (global_capture_opts.temp_dir && global_capture_opts.temp_dir[0] ? global_capture_opts.temp_dir : get_tmp_dir())
                             << tr("Untitled capture files"));
 
     /* pers conf */
